#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Trace:
  """
  Attributes:
   - traceId
   - spanId
   - caller
   - srcMethod
   - hintCode
   - hintContent
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'traceId', None, None, ), # 1
    (2, TType.STRING, 'spanId', None, None, ), # 2
    (3, TType.STRING, 'caller', None, None, ), # 3
    (4, TType.STRING, 'srcMethod', None, None, ), # 4
    (5, TType.I64, 'hintCode', None, None, ), # 5
    (6, TType.STRING, 'hintContent', None, None, ), # 6
  )

  def __init__(self, traceId=None, spanId=None, caller=None, srcMethod=None, hintCode=None, hintContent=None,):
    self.traceId = traceId
    self.spanId = spanId
    self.caller = caller
    self.srcMethod = srcMethod
    self.hintCode = hintCode
    self.hintContent = hintContent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.traceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spanId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.caller = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.srcMethod = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.hintCode = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.hintContent = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Trace')
    if self.traceId is not None:
      oprot.writeFieldBegin('traceId', TType.STRING, 1)
      oprot.writeString(self.traceId)
      oprot.writeFieldEnd()
    if self.spanId is not None:
      oprot.writeFieldBegin('spanId', TType.STRING, 2)
      oprot.writeString(self.spanId)
      oprot.writeFieldEnd()
    if self.caller is not None:
      oprot.writeFieldBegin('caller', TType.STRING, 3)
      oprot.writeString(self.caller)
      oprot.writeFieldEnd()
    if self.srcMethod is not None:
      oprot.writeFieldBegin('srcMethod', TType.STRING, 4)
      oprot.writeString(self.srcMethod)
      oprot.writeFieldEnd()
    if self.hintCode is not None:
      oprot.writeFieldBegin('hintCode', TType.I64, 5)
      oprot.writeI64(self.hintCode)
      oprot.writeFieldEnd()
    if self.hintContent is not None:
      oprot.writeFieldBegin('hintContent', TType.STRING, 6)
      oprot.writeString(self.hintContent)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.traceId is None:
      raise TProtocol.TProtocolException(message='Required field traceId is unset!')
    if self.spanId is None:
      raise TProtocol.TProtocolException(message='Required field spanId is unset!')
    if self.caller is None:
      raise TProtocol.TProtocolException(message='Required field caller is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.traceId)
    value = (value * 31) ^ hash(self.spanId)
    value = (value * 31) ^ hash(self.caller)
    value = (value * 31) ^ hash(self.srcMethod)
    value = (value * 31) ^ hash(self.hintCode)
    value = (value * 31) ^ hash(self.hintContent)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceReq:
  """
  Attributes:
   - product_id
   - area
   - flat
   - flng
   - tlat
   - tlng
   - passengerid
   - passenger_phone
   - user_type
   - road_distance
   - eta
   - pre_total_fee
   - stg_name
   - req_type
   - trace
   - ctime
   - bubble_id
   - app_version
   - app_channel
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'product_id', None, None, ), # 1
    (2, TType.I32, 'area', None, None, ), # 2
    (3, TType.DOUBLE, 'flat', None, None, ), # 3
    (4, TType.DOUBLE, 'flng', None, None, ), # 4
    (5, TType.DOUBLE, 'tlat', None, None, ), # 5
    (6, TType.DOUBLE, 'tlng', None, None, ), # 6
    (7, TType.I64, 'passengerid', None, None, ), # 7
    (8, TType.STRING, 'passenger_phone', None, None, ), # 8
    (9, TType.I32, 'user_type', None, None, ), # 9
    (10, TType.I32, 'road_distance', None, None, ), # 10
    (11, TType.I32, 'eta', None, None, ), # 11
    (12, TType.DOUBLE, 'pre_total_fee', None, None, ), # 12
    (13, TType.STRING, 'stg_name', None, None, ), # 13
    (14, TType.I32, 'req_type', None, None, ), # 14
    (15, TType.STRUCT, 'trace', (Trace, Trace.thrift_spec), None, ), # 15
    (16, TType.I64, 'ctime', None, None, ), # 16
    (17, TType.STRING, 'bubble_id', None, None, ), # 17
    (18, TType.STRING, 'app_version', None, None, ), # 18
    (19, TType.STRING, 'app_channel', None, None, ), # 19
  )

  def __init__(self, product_id=None, area=None, flat=None, flng=None, tlat=None, tlng=None, passengerid=None, passenger_phone=None, user_type=None, road_distance=None, eta=None, pre_total_fee=None, stg_name=None, req_type=None, trace=None, ctime=None, bubble_id=None, app_version=None, app_channel=None,):
    self.product_id = product_id
    self.area = area
    self.flat = flat
    self.flng = flng
    self.tlat = tlat
    self.tlng = tlng
    self.passengerid = passengerid
    self.passenger_phone = passenger_phone
    self.user_type = user_type
    self.road_distance = road_distance
    self.eta = eta
    self.pre_total_fee = pre_total_fee
    self.stg_name = stg_name
    self.req_type = req_type
    self.trace = trace
    self.ctime = ctime
    self.bubble_id = bubble_id
    self.app_version = app_version
    self.app_channel = app_channel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.product_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.area = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.flat = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.flng = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.tlat = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.tlng = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.passengerid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.passenger_phone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.user_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.road_distance = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.eta = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.pre_total_fee = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.stg_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.req_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.trace = Trace()
          self.trace.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.ctime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.bubble_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.app_version = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.app_channel = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceReq')
    if self.product_id is not None:
      oprot.writeFieldBegin('product_id', TType.I32, 1)
      oprot.writeI32(self.product_id)
      oprot.writeFieldEnd()
    if self.area is not None:
      oprot.writeFieldBegin('area', TType.I32, 2)
      oprot.writeI32(self.area)
      oprot.writeFieldEnd()
    if self.flat is not None:
      oprot.writeFieldBegin('flat', TType.DOUBLE, 3)
      oprot.writeDouble(self.flat)
      oprot.writeFieldEnd()
    if self.flng is not None:
      oprot.writeFieldBegin('flng', TType.DOUBLE, 4)
      oprot.writeDouble(self.flng)
      oprot.writeFieldEnd()
    if self.tlat is not None:
      oprot.writeFieldBegin('tlat', TType.DOUBLE, 5)
      oprot.writeDouble(self.tlat)
      oprot.writeFieldEnd()
    if self.tlng is not None:
      oprot.writeFieldBegin('tlng', TType.DOUBLE, 6)
      oprot.writeDouble(self.tlng)
      oprot.writeFieldEnd()
    if self.passengerid is not None:
      oprot.writeFieldBegin('passengerid', TType.I64, 7)
      oprot.writeI64(self.passengerid)
      oprot.writeFieldEnd()
    if self.passenger_phone is not None:
      oprot.writeFieldBegin('passenger_phone', TType.STRING, 8)
      oprot.writeString(self.passenger_phone)
      oprot.writeFieldEnd()
    if self.user_type is not None:
      oprot.writeFieldBegin('user_type', TType.I32, 9)
      oprot.writeI32(self.user_type)
      oprot.writeFieldEnd()
    if self.road_distance is not None:
      oprot.writeFieldBegin('road_distance', TType.I32, 10)
      oprot.writeI32(self.road_distance)
      oprot.writeFieldEnd()
    if self.eta is not None:
      oprot.writeFieldBegin('eta', TType.I32, 11)
      oprot.writeI32(self.eta)
      oprot.writeFieldEnd()
    if self.pre_total_fee is not None:
      oprot.writeFieldBegin('pre_total_fee', TType.DOUBLE, 12)
      oprot.writeDouble(self.pre_total_fee)
      oprot.writeFieldEnd()
    if self.stg_name is not None:
      oprot.writeFieldBegin('stg_name', TType.STRING, 13)
      oprot.writeString(self.stg_name)
      oprot.writeFieldEnd()
    if self.req_type is not None:
      oprot.writeFieldBegin('req_type', TType.I32, 14)
      oprot.writeI32(self.req_type)
      oprot.writeFieldEnd()
    if self.trace is not None:
      oprot.writeFieldBegin('trace', TType.STRUCT, 15)
      self.trace.write(oprot)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.I64, 16)
      oprot.writeI64(self.ctime)
      oprot.writeFieldEnd()
    if self.bubble_id is not None:
      oprot.writeFieldBegin('bubble_id', TType.STRING, 17)
      oprot.writeString(self.bubble_id)
      oprot.writeFieldEnd()
    if self.app_version is not None:
      oprot.writeFieldBegin('app_version', TType.STRING, 18)
      oprot.writeString(self.app_version)
      oprot.writeFieldEnd()
    if self.app_channel is not None:
      oprot.writeFieldBegin('app_channel', TType.STRING, 19)
      oprot.writeString(self.app_channel)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.product_id)
    value = (value * 31) ^ hash(self.area)
    value = (value * 31) ^ hash(self.flat)
    value = (value * 31) ^ hash(self.flng)
    value = (value * 31) ^ hash(self.tlat)
    value = (value * 31) ^ hash(self.tlng)
    value = (value * 31) ^ hash(self.passengerid)
    value = (value * 31) ^ hash(self.passenger_phone)
    value = (value * 31) ^ hash(self.user_type)
    value = (value * 31) ^ hash(self.road_distance)
    value = (value * 31) ^ hash(self.eta)
    value = (value * 31) ^ hash(self.pre_total_fee)
    value = (value * 31) ^ hash(self.stg_name)
    value = (value * 31) ^ hash(self.req_type)
    value = (value * 31) ^ hash(self.trace)
    value = (value * 31) ^ hash(self.ctime)
    value = (value * 31) ^ hash(self.bubble_id)
    value = (value * 31) ^ hash(self.app_version)
    value = (value * 31) ^ hash(self.app_channel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceRes:
  """
  Attributes:
   - err_no
   - err_msg
   - passenger_discount
   - passenger_price
   - driver_discount
   - driver_price
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'err_no', None, None, ), # 1
    (2, TType.STRING, 'err_msg', None, None, ), # 2
    (3, TType.DOUBLE, 'passenger_discount', None, None, ), # 3
    (4, TType.DOUBLE, 'passenger_price', None, None, ), # 4
    (5, TType.DOUBLE, 'driver_discount', None, None, ), # 5
    (6, TType.DOUBLE, 'driver_price', None, None, ), # 6
  )

  def __init__(self, err_no=None, err_msg=None, passenger_discount=None, passenger_price=None, driver_discount=None, driver_price=None,):
    self.err_no = err_no
    self.err_msg = err_msg
    self.passenger_discount = passenger_discount
    self.passenger_price = passenger_price
    self.driver_discount = driver_discount
    self.driver_price = driver_price

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.err_no = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.err_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.passenger_discount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.passenger_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.driver_discount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.driver_price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceRes')
    if self.err_no is not None:
      oprot.writeFieldBegin('err_no', TType.I32, 1)
      oprot.writeI32(self.err_no)
      oprot.writeFieldEnd()
    if self.err_msg is not None:
      oprot.writeFieldBegin('err_msg', TType.STRING, 2)
      oprot.writeString(self.err_msg)
      oprot.writeFieldEnd()
    if self.passenger_discount is not None:
      oprot.writeFieldBegin('passenger_discount', TType.DOUBLE, 3)
      oprot.writeDouble(self.passenger_discount)
      oprot.writeFieldEnd()
    if self.passenger_price is not None:
      oprot.writeFieldBegin('passenger_price', TType.DOUBLE, 4)
      oprot.writeDouble(self.passenger_price)
      oprot.writeFieldEnd()
    if self.driver_discount is not None:
      oprot.writeFieldBegin('driver_discount', TType.DOUBLE, 5)
      oprot.writeDouble(self.driver_discount)
      oprot.writeFieldEnd()
    if self.driver_price is not None:
      oprot.writeFieldBegin('driver_price', TType.DOUBLE, 6)
      oprot.writeDouble(self.driver_price)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.err_no)
    value = (value * 31) ^ hash(self.err_msg)
    value = (value * 31) ^ hash(self.passenger_discount)
    value = (value * 31) ^ hash(self.passenger_price)
    value = (value * 31) ^ hash(self.driver_discount)
    value = (value * 31) ^ hash(self.driver_price)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
