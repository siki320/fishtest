#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class KuaiCoupon:
  """
  Attributes:
   - couponInfo
   - reductFee
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'couponInfo', None, None, ), # 1
    (2, TType.DOUBLE, 'reductFee', None, None, ), # 2
  )

  def __init__(self, couponInfo=None, reductFee=None,):
    self.couponInfo = couponInfo
    self.reductFee = reductFee

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.couponInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.reductFee = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KuaiCoupon')
    if self.couponInfo is not None:
      oprot.writeFieldBegin('couponInfo', TType.STRING, 1)
      oprot.writeString(self.couponInfo)
      oprot.writeFieldEnd()
    if self.reductFee is not None:
      oprot.writeFieldBegin('reductFee', TType.DOUBLE, 2)
      oprot.writeDouble(self.reductFee)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.couponInfo)
    value = (value * 31) ^ hash(self.reductFee)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CarpoolCoupon:
  """
  Attributes:
   - couponInfo
   - reductFee
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'couponInfo', None, None, ), # 1
    (2, TType.DOUBLE, 'reductFee', None, None, ), # 2
  )

  def __init__(self, couponInfo=None, reductFee=None,):
    self.couponInfo = couponInfo
    self.reductFee = reductFee

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.couponInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.reductFee = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CarpoolCoupon')
    if self.couponInfo is not None:
      oprot.writeFieldBegin('couponInfo', TType.STRING, 1)
      oprot.writeString(self.couponInfo)
      oprot.writeFieldEnd()
    if self.reductFee is not None:
      oprot.writeFieldBegin('reductFee', TType.DOUBLE, 2)
      oprot.writeDouble(self.reductFee)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.couponInfo)
    value = (value * 31) ^ hash(self.reductFee)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PreOrder:
  """
  Attributes:
   - bubbleId
   - cityId
   - channel
   - isSmartRequest
   - userType
   - isAppoint
   - appointTime
   - fromName
   - flng
   - flat
   - targetName
   - tlng
   - tlat
   - startDestDistance
   - preTotalFee
   - preFinishTime
   - carpoolFee
   - tip
   - dynamicTimes
   - carNumAround
   - etaTime
   - extInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'bubbleId', None, None, ), # 1
    (2, TType.I32, 'cityId', None, None, ), # 2
    (3, TType.STRING, 'channel', None, None, ), # 3
    (4, TType.I32, 'isSmartRequest', None, None, ), # 4
    (5, TType.I32, 'userType', None, None, ), # 5
    (6, TType.BOOL, 'isAppoint', None, None, ), # 6
    (7, TType.STRING, 'appointTime', None, None, ), # 7
    (8, TType.STRING, 'fromName', None, None, ), # 8
    (9, TType.DOUBLE, 'flng', None, None, ), # 9
    (10, TType.DOUBLE, 'flat', None, None, ), # 10
    (11, TType.STRING, 'targetName', None, None, ), # 11
    (12, TType.DOUBLE, 'tlng', None, None, ), # 12
    (13, TType.DOUBLE, 'tlat', None, None, ), # 13
    (14, TType.DOUBLE, 'startDestDistance', None, None, ), # 14
    (15, TType.DOUBLE, 'preTotalFee', None, None, ), # 15
    (16, TType.DOUBLE, 'preFinishTime', None, None, ), # 16
    (17, TType.DOUBLE, 'carpoolFee', None, None, ), # 17
    (18, TType.I32, 'tip', None, None, ), # 18
    (19, TType.DOUBLE, 'dynamicTimes', None, None, ), # 19
    (20, TType.I32, 'carNumAround', None, None, ), # 20
    (21, TType.I32, 'etaTime', None, None, ), # 21
    (22, TType.STRING, 'extInfo', None, None, ), # 22
  )

  def __init__(self, bubbleId=None, cityId=None, channel=None, isSmartRequest=None, userType=None, isAppoint=None, appointTime=None, fromName=None, flng=None, flat=None, targetName=None, tlng=None, tlat=None, startDestDistance=None, preTotalFee=None, preFinishTime=None, carpoolFee=None, tip=None, dynamicTimes=None, carNumAround=None, etaTime=None, extInfo=None,):
    self.bubbleId = bubbleId
    self.cityId = cityId
    self.channel = channel
    self.isSmartRequest = isSmartRequest
    self.userType = userType
    self.isAppoint = isAppoint
    self.appointTime = appointTime
    self.fromName = fromName
    self.flng = flng
    self.flat = flat
    self.targetName = targetName
    self.tlng = tlng
    self.tlat = tlat
    self.startDestDistance = startDestDistance
    self.preTotalFee = preTotalFee
    self.preFinishTime = preFinishTime
    self.carpoolFee = carpoolFee
    self.tip = tip
    self.dynamicTimes = dynamicTimes
    self.carNumAround = carNumAround
    self.etaTime = etaTime
    self.extInfo = extInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.bubbleId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.channel = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.isSmartRequest = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.userType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.isAppoint = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.appointTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.fromName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.flng = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.flat = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.targetName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.tlng = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.tlat = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.startDestDistance = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.preTotalFee = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.preFinishTime = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.carpoolFee = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.tip = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.dynamicTimes = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.carNumAround = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.etaTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.extInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PreOrder')
    if self.bubbleId is not None:
      oprot.writeFieldBegin('bubbleId', TType.STRING, 1)
      oprot.writeString(self.bubbleId)
      oprot.writeFieldEnd()
    if self.cityId is not None:
      oprot.writeFieldBegin('cityId', TType.I32, 2)
      oprot.writeI32(self.cityId)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.STRING, 3)
      oprot.writeString(self.channel)
      oprot.writeFieldEnd()
    if self.isSmartRequest is not None:
      oprot.writeFieldBegin('isSmartRequest', TType.I32, 4)
      oprot.writeI32(self.isSmartRequest)
      oprot.writeFieldEnd()
    if self.userType is not None:
      oprot.writeFieldBegin('userType', TType.I32, 5)
      oprot.writeI32(self.userType)
      oprot.writeFieldEnd()
    if self.isAppoint is not None:
      oprot.writeFieldBegin('isAppoint', TType.BOOL, 6)
      oprot.writeBool(self.isAppoint)
      oprot.writeFieldEnd()
    if self.appointTime is not None:
      oprot.writeFieldBegin('appointTime', TType.STRING, 7)
      oprot.writeString(self.appointTime)
      oprot.writeFieldEnd()
    if self.fromName is not None:
      oprot.writeFieldBegin('fromName', TType.STRING, 8)
      oprot.writeString(self.fromName)
      oprot.writeFieldEnd()
    if self.flng is not None:
      oprot.writeFieldBegin('flng', TType.DOUBLE, 9)
      oprot.writeDouble(self.flng)
      oprot.writeFieldEnd()
    if self.flat is not None:
      oprot.writeFieldBegin('flat', TType.DOUBLE, 10)
      oprot.writeDouble(self.flat)
      oprot.writeFieldEnd()
    if self.targetName is not None:
      oprot.writeFieldBegin('targetName', TType.STRING, 11)
      oprot.writeString(self.targetName)
      oprot.writeFieldEnd()
    if self.tlng is not None:
      oprot.writeFieldBegin('tlng', TType.DOUBLE, 12)
      oprot.writeDouble(self.tlng)
      oprot.writeFieldEnd()
    if self.tlat is not None:
      oprot.writeFieldBegin('tlat', TType.DOUBLE, 13)
      oprot.writeDouble(self.tlat)
      oprot.writeFieldEnd()
    if self.startDestDistance is not None:
      oprot.writeFieldBegin('startDestDistance', TType.DOUBLE, 14)
      oprot.writeDouble(self.startDestDistance)
      oprot.writeFieldEnd()
    if self.preTotalFee is not None:
      oprot.writeFieldBegin('preTotalFee', TType.DOUBLE, 15)
      oprot.writeDouble(self.preTotalFee)
      oprot.writeFieldEnd()
    if self.preFinishTime is not None:
      oprot.writeFieldBegin('preFinishTime', TType.DOUBLE, 16)
      oprot.writeDouble(self.preFinishTime)
      oprot.writeFieldEnd()
    if self.carpoolFee is not None:
      oprot.writeFieldBegin('carpoolFee', TType.DOUBLE, 17)
      oprot.writeDouble(self.carpoolFee)
      oprot.writeFieldEnd()
    if self.tip is not None:
      oprot.writeFieldBegin('tip', TType.I32, 18)
      oprot.writeI32(self.tip)
      oprot.writeFieldEnd()
    if self.dynamicTimes is not None:
      oprot.writeFieldBegin('dynamicTimes', TType.DOUBLE, 19)
      oprot.writeDouble(self.dynamicTimes)
      oprot.writeFieldEnd()
    if self.carNumAround is not None:
      oprot.writeFieldBegin('carNumAround', TType.I32, 20)
      oprot.writeI32(self.carNumAround)
      oprot.writeFieldEnd()
    if self.etaTime is not None:
      oprot.writeFieldBegin('etaTime', TType.I32, 21)
      oprot.writeI32(self.etaTime)
      oprot.writeFieldEnd()
    if self.extInfo is not None:
      oprot.writeFieldBegin('extInfo', TType.STRING, 22)
      oprot.writeString(self.extInfo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bubbleId)
    value = (value * 31) ^ hash(self.cityId)
    value = (value * 31) ^ hash(self.channel)
    value = (value * 31) ^ hash(self.isSmartRequest)
    value = (value * 31) ^ hash(self.userType)
    value = (value * 31) ^ hash(self.isAppoint)
    value = (value * 31) ^ hash(self.appointTime)
    value = (value * 31) ^ hash(self.fromName)
    value = (value * 31) ^ hash(self.flng)
    value = (value * 31) ^ hash(self.flat)
    value = (value * 31) ^ hash(self.targetName)
    value = (value * 31) ^ hash(self.tlng)
    value = (value * 31) ^ hash(self.tlat)
    value = (value * 31) ^ hash(self.startDestDistance)
    value = (value * 31) ^ hash(self.preTotalFee)
    value = (value * 31) ^ hash(self.preFinishTime)
    value = (value * 31) ^ hash(self.carpoolFee)
    value = (value * 31) ^ hash(self.tip)
    value = (value * 31) ^ hash(self.dynamicTimes)
    value = (value * 31) ^ hash(self.carNumAround)
    value = (value * 31) ^ hash(self.etaTime)
    value = (value * 31) ^ hash(self.extInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DupsPriceConf:
  """
  Attributes:
   - allowance
   - maxDiscount
   - minDiscount
   - maxReductFee
   - extInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'allowance', None, None, ), # 1
    (2, TType.I32, 'maxDiscount', None, None, ), # 2
    (3, TType.I32, 'minDiscount', None, None, ), # 3
    (4, TType.I32, 'maxReductFee', None, None, ), # 4
    (5, TType.STRING, 'extInfo', None, None, ), # 5
  )

  def __init__(self, allowance=None, maxDiscount=None, minDiscount=None, maxReductFee=None, extInfo=None,):
    self.allowance = allowance
    self.maxDiscount = maxDiscount
    self.minDiscount = minDiscount
    self.maxReductFee = maxReductFee
    self.extInfo = extInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.allowance = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.maxDiscount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.minDiscount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.maxReductFee = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.extInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DupsPriceConf')
    if self.allowance is not None:
      oprot.writeFieldBegin('allowance', TType.I32, 1)
      oprot.writeI32(self.allowance)
      oprot.writeFieldEnd()
    if self.maxDiscount is not None:
      oprot.writeFieldBegin('maxDiscount', TType.I32, 2)
      oprot.writeI32(self.maxDiscount)
      oprot.writeFieldEnd()
    if self.minDiscount is not None:
      oprot.writeFieldBegin('minDiscount', TType.I32, 3)
      oprot.writeI32(self.minDiscount)
      oprot.writeFieldEnd()
    if self.maxReductFee is not None:
      oprot.writeFieldBegin('maxReductFee', TType.I32, 4)
      oprot.writeI32(self.maxReductFee)
      oprot.writeFieldEnd()
    if self.extInfo is not None:
      oprot.writeFieldBegin('extInfo', TType.STRING, 5)
      oprot.writeString(self.extInfo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.allowance)
    value = (value * 31) ^ hash(self.maxDiscount)
    value = (value * 31) ^ hash(self.minDiscount)
    value = (value * 31) ^ hash(self.maxReductFee)
    value = (value * 31) ^ hash(self.extInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DupsPriceRequest:
  """
  Attributes:
   - serviceName
   - productId
   - subsidyChannel
   - pid
   - phone
   - isPre
   - order
   - subsidyConf
   - frequencyCoeConf
   - kuaiCoupon
   - carpoolCoupon
   - extInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'serviceName', None, None, ), # 1
    (2, TType.I32, 'productId', None, None, ), # 2
    (3, TType.I32, 'subsidyChannel', None, None, ), # 3
    (4, TType.STRING, 'pid', None, None, ), # 4
    (5, TType.STRING, 'phone', None, None, ), # 5
    (6, TType.I32, 'isPre', None, 1, ), # 6
    (7, TType.STRUCT, 'order', (PreOrder, PreOrder.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'subsidyConf', (DupsPriceConf, DupsPriceConf.thrift_spec), None, ), # 8
    (9, TType.MAP, 'frequencyCoeConf', (TType.STRING,None,TType.DOUBLE,None), None, ), # 9
    (10, TType.STRUCT, 'kuaiCoupon', (KuaiCoupon, KuaiCoupon.thrift_spec), None, ), # 10
    (11, TType.STRUCT, 'carpoolCoupon', (CarpoolCoupon, CarpoolCoupon.thrift_spec), None, ), # 11
    (12, TType.STRING, 'extInfo', None, None, ), # 12
  )

  def __init__(self, serviceName=None, productId=None, subsidyChannel=None, pid=None, phone=None, isPre=thrift_spec[6][4], order=None, subsidyConf=None, frequencyCoeConf=None, kuaiCoupon=None, carpoolCoupon=None, extInfo=None,):
    self.serviceName = serviceName
    self.productId = productId
    self.subsidyChannel = subsidyChannel
    self.pid = pid
    self.phone = phone
    self.isPre = isPre
    self.order = order
    self.subsidyConf = subsidyConf
    self.frequencyCoeConf = frequencyCoeConf
    self.kuaiCoupon = kuaiCoupon
    self.carpoolCoupon = carpoolCoupon
    self.extInfo = extInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.serviceName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.productId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.subsidyChannel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.pid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.phone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.isPre = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.order = PreOrder()
          self.order.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.subsidyConf = DupsPriceConf()
          self.subsidyConf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.frequencyCoeConf = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readDouble();
            self.frequencyCoeConf[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.kuaiCoupon = KuaiCoupon()
          self.kuaiCoupon.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.carpoolCoupon = CarpoolCoupon()
          self.carpoolCoupon.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.extInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DupsPriceRequest')
    if self.serviceName is not None:
      oprot.writeFieldBegin('serviceName', TType.STRING, 1)
      oprot.writeString(self.serviceName)
      oprot.writeFieldEnd()
    if self.productId is not None:
      oprot.writeFieldBegin('productId', TType.I32, 2)
      oprot.writeI32(self.productId)
      oprot.writeFieldEnd()
    if self.subsidyChannel is not None:
      oprot.writeFieldBegin('subsidyChannel', TType.I32, 3)
      oprot.writeI32(self.subsidyChannel)
      oprot.writeFieldEnd()
    if self.pid is not None:
      oprot.writeFieldBegin('pid', TType.STRING, 4)
      oprot.writeString(self.pid)
      oprot.writeFieldEnd()
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 5)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    if self.isPre is not None:
      oprot.writeFieldBegin('isPre', TType.I32, 6)
      oprot.writeI32(self.isPre)
      oprot.writeFieldEnd()
    if self.order is not None:
      oprot.writeFieldBegin('order', TType.STRUCT, 7)
      self.order.write(oprot)
      oprot.writeFieldEnd()
    if self.subsidyConf is not None:
      oprot.writeFieldBegin('subsidyConf', TType.STRUCT, 8)
      self.subsidyConf.write(oprot)
      oprot.writeFieldEnd()
    if self.frequencyCoeConf is not None:
      oprot.writeFieldBegin('frequencyCoeConf', TType.MAP, 9)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.frequencyCoeConf))
      for kiter7,viter8 in self.frequencyCoeConf.items():
        oprot.writeString(kiter7)
        oprot.writeDouble(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.kuaiCoupon is not None:
      oprot.writeFieldBegin('kuaiCoupon', TType.STRUCT, 10)
      self.kuaiCoupon.write(oprot)
      oprot.writeFieldEnd()
    if self.carpoolCoupon is not None:
      oprot.writeFieldBegin('carpoolCoupon', TType.STRUCT, 11)
      self.carpoolCoupon.write(oprot)
      oprot.writeFieldEnd()
    if self.extInfo is not None:
      oprot.writeFieldBegin('extInfo', TType.STRING, 12)
      oprot.writeString(self.extInfo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.serviceName is None:
      raise TProtocol.TProtocolException(message='Required field serviceName is unset!')
    if self.productId is None:
      raise TProtocol.TProtocolException(message='Required field productId is unset!')
    if self.subsidyChannel is None:
      raise TProtocol.TProtocolException(message='Required field subsidyChannel is unset!')
    if self.pid is None:
      raise TProtocol.TProtocolException(message='Required field pid is unset!')
    if self.phone is None:
      raise TProtocol.TProtocolException(message='Required field phone is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.serviceName)
    value = (value * 31) ^ hash(self.productId)
    value = (value * 31) ^ hash(self.subsidyChannel)
    value = (value * 31) ^ hash(self.pid)
    value = (value * 31) ^ hash(self.phone)
    value = (value * 31) ^ hash(self.isPre)
    value = (value * 31) ^ hash(self.order)
    value = (value * 31) ^ hash(self.subsidyConf)
    value = (value * 31) ^ hash(self.frequencyCoeConf)
    value = (value * 31) ^ hash(self.kuaiCoupon)
    value = (value * 31) ^ hash(self.carpoolCoupon)
    value = (value * 31) ^ hash(self.extInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DupsPriceResponse:
  """
  Attributes:
   - discount
   - discount_type
   - errorCode
   - errorMsg
   - extInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'discount', None, None, ), # 1
    (2, TType.I32, 'discount_type', None, None, ), # 2
    (3, TType.I32, 'errorCode', None, None, ), # 3
    (4, TType.STRING, 'errorMsg', None, None, ), # 4
    (5, TType.STRING, 'extInfo', None, None, ), # 5
  )

  def __init__(self, discount=None, discount_type=None, errorCode=None, errorMsg=None, extInfo=None,):
    self.discount = discount
    self.discount_type = discount_type
    self.errorCode = errorCode
    self.errorMsg = errorMsg
    self.extInfo = extInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.discount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.discount_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.errorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.errorMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.extInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DupsPriceResponse')
    if self.discount is not None:
      oprot.writeFieldBegin('discount', TType.DOUBLE, 1)
      oprot.writeDouble(self.discount)
      oprot.writeFieldEnd()
    if self.discount_type is not None:
      oprot.writeFieldBegin('discount_type', TType.I32, 2)
      oprot.writeI32(self.discount_type)
      oprot.writeFieldEnd()
    if self.errorCode is not None:
      oprot.writeFieldBegin('errorCode', TType.I32, 3)
      oprot.writeI32(self.errorCode)
      oprot.writeFieldEnd()
    if self.errorMsg is not None:
      oprot.writeFieldBegin('errorMsg', TType.STRING, 4)
      oprot.writeString(self.errorMsg)
      oprot.writeFieldEnd()
    if self.extInfo is not None:
      oprot.writeFieldBegin('extInfo', TType.STRING, 5)
      oprot.writeString(self.extInfo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.discount)
    value = (value * 31) ^ hash(self.discount_type)
    value = (value * 31) ^ hash(self.errorCode)
    value = (value * 31) ^ hash(self.errorMsg)
    value = (value * 31) ^ hash(self.extInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
