#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class RTMultiSetFlag:
  kOverride = 0
  kAppend = 1

  _VALUES_TO_NAMES = {
    0: "kOverride",
    1: "kAppend",
  }

  _NAMES_TO_VALUES = {
    "kOverride": 0,
    "kAppend": 1,
  }


class RTKeyInfo:
  """
  Attributes:
   - key
   - fields
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.LIST, 'fields', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, key=None, fields=None,):
    self.key = key
    self.fields = fields

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.fields = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.fields.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RTKeyInfo')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.fields is not None:
      oprot.writeFieldBegin('fields', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.fields))
      for iter6 in self.fields:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.key is None:
      raise TProtocol.TProtocolException(message='Required field key is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.fields)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RTLineInfo:
  """
  Attributes:
   - key
   - field_value_map
   - ttl
   - flag
   - max_item_num
   - ret_code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.MAP, 'field_value_map', (TType.STRING,None,TType.STRING,None), None, ), # 2
    (3, TType.I32, 'ttl', None, None, ), # 3
    (4, TType.I32, 'flag', None, None, ), # 4
    (5, TType.I32, 'max_item_num', None, None, ), # 5
    (6, TType.BYTE, 'ret_code', None, None, ), # 6
  )

  def __init__(self, key=None, field_value_map=None, ttl=None, flag=None, max_item_num=None, ret_code=None,):
    self.key = key
    self.field_value_map = field_value_map
    self.ttl = ttl
    self.flag = flag
    self.max_item_num = max_item_num
    self.ret_code = ret_code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.field_value_map = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in xrange(_size7):
            _key12 = iprot.readString();
            _val13 = iprot.readString();
            self.field_value_map[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.ttl = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.flag = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.max_item_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BYTE:
          self.ret_code = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RTLineInfo')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.field_value_map is not None:
      oprot.writeFieldBegin('field_value_map', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.field_value_map))
      for kiter14,viter15 in self.field_value_map.items():
        oprot.writeString(kiter14)
        oprot.writeString(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ttl is not None:
      oprot.writeFieldBegin('ttl', TType.I32, 3)
      oprot.writeI32(self.ttl)
      oprot.writeFieldEnd()
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.I32, 4)
      oprot.writeI32(self.flag)
      oprot.writeFieldEnd()
    if self.max_item_num is not None:
      oprot.writeFieldBegin('max_item_num', TType.I32, 5)
      oprot.writeI32(self.max_item_num)
      oprot.writeFieldEnd()
    if self.ret_code is not None:
      oprot.writeFieldBegin('ret_code', TType.BYTE, 6)
      oprot.writeByte(self.ret_code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.key is None:
      raise TProtocol.TProtocolException(message='Required field key is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.key)
    value = (value * 31) ^ hash(self.field_value_map)
    value = (value * 31) ^ hash(self.ttl)
    value = (value * 31) ^ hash(self.flag)
    value = (value * 31) ^ hash(self.max_item_num)
    value = (value * 31) ^ hash(self.ret_code)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RTMultiGetRequest:
  """
  Attributes:
   - ver
   - cip
   - product
   - combo
   - verify
   - rtname
   - keys
   - log_id
   - hintCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'ver', None, None, ), # 1
    (2, TType.STRING, 'cip', None, None, ), # 2
    (3, TType.STRING, 'product', None, None, ), # 3
    (4, TType.STRING, 'combo', None, None, ), # 4
    (5, TType.STRING, 'verify', None, None, ), # 5
    (6, TType.STRING, 'rtname', None, None, ), # 6
    (7, TType.LIST, 'keys', (TType.STRUCT,(RTKeyInfo, RTKeyInfo.thrift_spec)), None, ), # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'log_id', None, None, ), # 20
    (21, TType.I64, 'hintCode', None, None, ), # 21
  )

  def __init__(self, ver=None, cip=None, product=None, combo=None, verify=None, rtname=None, keys=None, log_id=None, hintCode=None,):
    self.ver = ver
    self.cip = cip
    self.product = product
    self.combo = combo
    self.verify = verify
    self.rtname = rtname
    self.keys = keys
    self.log_id = log_id
    self.hintCode = hintCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.ver = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.product = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.combo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.verify = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.rtname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.keys = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = RTKeyInfo()
            _elem21.read(iprot)
            self.keys.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.log_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.hintCode = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RTMultiGetRequest')
    if self.ver is not None:
      oprot.writeFieldBegin('ver', TType.BYTE, 1)
      oprot.writeByte(self.ver)
      oprot.writeFieldEnd()
    if self.cip is not None:
      oprot.writeFieldBegin('cip', TType.STRING, 2)
      oprot.writeString(self.cip)
      oprot.writeFieldEnd()
    if self.product is not None:
      oprot.writeFieldBegin('product', TType.STRING, 3)
      oprot.writeString(self.product)
      oprot.writeFieldEnd()
    if self.combo is not None:
      oprot.writeFieldBegin('combo', TType.STRING, 4)
      oprot.writeString(self.combo)
      oprot.writeFieldEnd()
    if self.verify is not None:
      oprot.writeFieldBegin('verify', TType.STRING, 5)
      oprot.writeString(self.verify)
      oprot.writeFieldEnd()
    if self.rtname is not None:
      oprot.writeFieldBegin('rtname', TType.STRING, 6)
      oprot.writeString(self.rtname)
      oprot.writeFieldEnd()
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.keys))
      for iter22 in self.keys:
        iter22.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.log_id is not None:
      oprot.writeFieldBegin('log_id', TType.I64, 20)
      oprot.writeI64(self.log_id)
      oprot.writeFieldEnd()
    if self.hintCode is not None:
      oprot.writeFieldBegin('hintCode', TType.I64, 21)
      oprot.writeI64(self.hintCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ver is None:
      raise TProtocol.TProtocolException(message='Required field ver is unset!')
    if self.cip is None:
      raise TProtocol.TProtocolException(message='Required field cip is unset!')
    if self.product is None:
      raise TProtocol.TProtocolException(message='Required field product is unset!')
    if self.combo is None:
      raise TProtocol.TProtocolException(message='Required field combo is unset!')
    if self.verify is None:
      raise TProtocol.TProtocolException(message='Required field verify is unset!')
    if self.rtname is None:
      raise TProtocol.TProtocolException(message='Required field rtname is unset!')
    if self.keys is None:
      raise TProtocol.TProtocolException(message='Required field keys is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ver)
    value = (value * 31) ^ hash(self.cip)
    value = (value * 31) ^ hash(self.product)
    value = (value * 31) ^ hash(self.combo)
    value = (value * 31) ^ hash(self.verify)
    value = (value * 31) ^ hash(self.rtname)
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.log_id)
    value = (value * 31) ^ hash(self.hintCode)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RTMultiGetResponse:
  """
  Attributes:
   - ver
   - ret_code
   - ret_msg
   - res
   - log_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'ver', None, None, ), # 1
    (2, TType.I32, 'ret_code', None, None, ), # 2
    (3, TType.STRING, 'ret_msg', None, None, ), # 3
    (4, TType.LIST, 'res', (TType.STRUCT,(RTLineInfo, RTLineInfo.thrift_spec)), None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'log_id', None, None, ), # 20
  )

  def __init__(self, ver=None, ret_code=None, ret_msg=None, res=None, log_id=None,):
    self.ver = ver
    self.ret_code = ret_code
    self.ret_msg = ret_msg
    self.res = res
    self.log_id = log_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.ver = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ret_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ret_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.res = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in xrange(_size23):
            _elem28 = RTLineInfo()
            _elem28.read(iprot)
            self.res.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.log_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RTMultiGetResponse')
    if self.ver is not None:
      oprot.writeFieldBegin('ver', TType.BYTE, 1)
      oprot.writeByte(self.ver)
      oprot.writeFieldEnd()
    if self.ret_code is not None:
      oprot.writeFieldBegin('ret_code', TType.I32, 2)
      oprot.writeI32(self.ret_code)
      oprot.writeFieldEnd()
    if self.ret_msg is not None:
      oprot.writeFieldBegin('ret_msg', TType.STRING, 3)
      oprot.writeString(self.ret_msg)
      oprot.writeFieldEnd()
    if self.res is not None:
      oprot.writeFieldBegin('res', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.res))
      for iter29 in self.res:
        iter29.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.log_id is not None:
      oprot.writeFieldBegin('log_id', TType.I64, 20)
      oprot.writeI64(self.log_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ver is None:
      raise TProtocol.TProtocolException(message='Required field ver is unset!')
    if self.ret_code is None:
      raise TProtocol.TProtocolException(message='Required field ret_code is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ver)
    value = (value * 31) ^ hash(self.ret_code)
    value = (value * 31) ^ hash(self.ret_msg)
    value = (value * 31) ^ hash(self.res)
    value = (value * 31) ^ hash(self.log_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RTMultiSetRequest:
  """
  Attributes:
   - ver
   - cip
   - product
   - combo
   - verify
   - rtname
   - req
   - flag
   - log_id
   - hintCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'ver', None, None, ), # 1
    (2, TType.STRING, 'cip', None, None, ), # 2
    (3, TType.STRING, 'product', None, None, ), # 3
    (4, TType.STRING, 'combo', None, None, ), # 4
    (5, TType.STRING, 'verify', None, None, ), # 5
    (6, TType.STRING, 'rtname', None, None, ), # 6
    (7, TType.LIST, 'req', (TType.STRUCT,(RTLineInfo, RTLineInfo.thrift_spec)), None, ), # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I32, 'flag', None, None, ), # 20
    (21, TType.I64, 'log_id', None, None, ), # 21
    (22, TType.I64, 'hintCode', None, None, ), # 22
  )

  def __init__(self, ver=None, cip=None, product=None, combo=None, verify=None, rtname=None, req=None, flag=None, log_id=None, hintCode=None,):
    self.ver = ver
    self.cip = cip
    self.product = product
    self.combo = combo
    self.verify = verify
    self.rtname = rtname
    self.req = req
    self.flag = flag
    self.log_id = log_id
    self.hintCode = hintCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.ver = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.product = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.combo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.verify = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.rtname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.req = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = RTLineInfo()
            _elem35.read(iprot)
            self.req.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.flag = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.log_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I64:
          self.hintCode = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RTMultiSetRequest')
    if self.ver is not None:
      oprot.writeFieldBegin('ver', TType.BYTE, 1)
      oprot.writeByte(self.ver)
      oprot.writeFieldEnd()
    if self.cip is not None:
      oprot.writeFieldBegin('cip', TType.STRING, 2)
      oprot.writeString(self.cip)
      oprot.writeFieldEnd()
    if self.product is not None:
      oprot.writeFieldBegin('product', TType.STRING, 3)
      oprot.writeString(self.product)
      oprot.writeFieldEnd()
    if self.combo is not None:
      oprot.writeFieldBegin('combo', TType.STRING, 4)
      oprot.writeString(self.combo)
      oprot.writeFieldEnd()
    if self.verify is not None:
      oprot.writeFieldBegin('verify', TType.STRING, 5)
      oprot.writeString(self.verify)
      oprot.writeFieldEnd()
    if self.rtname is not None:
      oprot.writeFieldBegin('rtname', TType.STRING, 6)
      oprot.writeString(self.rtname)
      oprot.writeFieldEnd()
    if self.req is not None:
      oprot.writeFieldBegin('req', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.req))
      for iter36 in self.req:
        iter36.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.I32, 20)
      oprot.writeI32(self.flag)
      oprot.writeFieldEnd()
    if self.log_id is not None:
      oprot.writeFieldBegin('log_id', TType.I64, 21)
      oprot.writeI64(self.log_id)
      oprot.writeFieldEnd()
    if self.hintCode is not None:
      oprot.writeFieldBegin('hintCode', TType.I64, 22)
      oprot.writeI64(self.hintCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ver is None:
      raise TProtocol.TProtocolException(message='Required field ver is unset!')
    if self.cip is None:
      raise TProtocol.TProtocolException(message='Required field cip is unset!')
    if self.product is None:
      raise TProtocol.TProtocolException(message='Required field product is unset!')
    if self.combo is None:
      raise TProtocol.TProtocolException(message='Required field combo is unset!')
    if self.verify is None:
      raise TProtocol.TProtocolException(message='Required field verify is unset!')
    if self.rtname is None:
      raise TProtocol.TProtocolException(message='Required field rtname is unset!')
    if self.req is None:
      raise TProtocol.TProtocolException(message='Required field req is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ver)
    value = (value * 31) ^ hash(self.cip)
    value = (value * 31) ^ hash(self.product)
    value = (value * 31) ^ hash(self.combo)
    value = (value * 31) ^ hash(self.verify)
    value = (value * 31) ^ hash(self.rtname)
    value = (value * 31) ^ hash(self.req)
    value = (value * 31) ^ hash(self.flag)
    value = (value * 31) ^ hash(self.log_id)
    value = (value * 31) ^ hash(self.hintCode)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RTMultiSetResponse:
  """
  Attributes:
   - ver
   - ret_code
   - ret_msg
   - keys
   - log_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'ver', None, None, ), # 1
    (2, TType.I32, 'ret_code', None, None, ), # 2
    (3, TType.STRING, 'ret_msg', None, None, ), # 3
    (4, TType.LIST, 'keys', (TType.STRUCT,(RTKeyInfo, RTKeyInfo.thrift_spec)), None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'log_id', None, None, ), # 20
  )

  def __init__(self, ver=None, ret_code=None, ret_msg=None, keys=None, log_id=None,):
    self.ver = ver
    self.ret_code = ret_code
    self.ret_msg = ret_msg
    self.keys = keys
    self.log_id = log_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.ver = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ret_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ret_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.keys = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = RTKeyInfo()
            _elem42.read(iprot)
            self.keys.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.log_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RTMultiSetResponse')
    if self.ver is not None:
      oprot.writeFieldBegin('ver', TType.BYTE, 1)
      oprot.writeByte(self.ver)
      oprot.writeFieldEnd()
    if self.ret_code is not None:
      oprot.writeFieldBegin('ret_code', TType.I32, 2)
      oprot.writeI32(self.ret_code)
      oprot.writeFieldEnd()
    if self.ret_msg is not None:
      oprot.writeFieldBegin('ret_msg', TType.STRING, 3)
      oprot.writeString(self.ret_msg)
      oprot.writeFieldEnd()
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.keys))
      for iter43 in self.keys:
        iter43.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.log_id is not None:
      oprot.writeFieldBegin('log_id', TType.I64, 20)
      oprot.writeI64(self.log_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ver is None:
      raise TProtocol.TProtocolException(message='Required field ver is unset!')
    if self.ret_code is None:
      raise TProtocol.TProtocolException(message='Required field ret_code is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ver)
    value = (value * 31) ^ hash(self.ret_code)
    value = (value * 31) ^ hash(self.ret_msg)
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.log_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RTMultiDelRequest:
  """
  Attributes:
   - ver
   - cip
   - product
   - combo
   - verify
   - rtname
   - req
   - log_id
   - hintCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'ver', None, None, ), # 1
    (2, TType.STRING, 'cip', None, None, ), # 2
    (3, TType.STRING, 'product', None, None, ), # 3
    (4, TType.STRING, 'combo', None, None, ), # 4
    (5, TType.STRING, 'verify', None, None, ), # 5
    (6, TType.STRING, 'rtname', None, None, ), # 6
    (7, TType.LIST, 'req', (TType.STRUCT,(RTKeyInfo, RTKeyInfo.thrift_spec)), None, ), # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'log_id', None, None, ), # 20
    (21, TType.I64, 'hintCode', None, None, ), # 21
  )

  def __init__(self, ver=None, cip=None, product=None, combo=None, verify=None, rtname=None, req=None, log_id=None, hintCode=None,):
    self.ver = ver
    self.cip = cip
    self.product = product
    self.combo = combo
    self.verify = verify
    self.rtname = rtname
    self.req = req
    self.log_id = log_id
    self.hintCode = hintCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.ver = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.product = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.combo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.verify = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.rtname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.req = []
          (_etype47, _size44) = iprot.readListBegin()
          for _i48 in xrange(_size44):
            _elem49 = RTKeyInfo()
            _elem49.read(iprot)
            self.req.append(_elem49)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.log_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.hintCode = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RTMultiDelRequest')
    if self.ver is not None:
      oprot.writeFieldBegin('ver', TType.BYTE, 1)
      oprot.writeByte(self.ver)
      oprot.writeFieldEnd()
    if self.cip is not None:
      oprot.writeFieldBegin('cip', TType.STRING, 2)
      oprot.writeString(self.cip)
      oprot.writeFieldEnd()
    if self.product is not None:
      oprot.writeFieldBegin('product', TType.STRING, 3)
      oprot.writeString(self.product)
      oprot.writeFieldEnd()
    if self.combo is not None:
      oprot.writeFieldBegin('combo', TType.STRING, 4)
      oprot.writeString(self.combo)
      oprot.writeFieldEnd()
    if self.verify is not None:
      oprot.writeFieldBegin('verify', TType.STRING, 5)
      oprot.writeString(self.verify)
      oprot.writeFieldEnd()
    if self.rtname is not None:
      oprot.writeFieldBegin('rtname', TType.STRING, 6)
      oprot.writeString(self.rtname)
      oprot.writeFieldEnd()
    if self.req is not None:
      oprot.writeFieldBegin('req', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.req))
      for iter50 in self.req:
        iter50.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.log_id is not None:
      oprot.writeFieldBegin('log_id', TType.I64, 20)
      oprot.writeI64(self.log_id)
      oprot.writeFieldEnd()
    if self.hintCode is not None:
      oprot.writeFieldBegin('hintCode', TType.I64, 21)
      oprot.writeI64(self.hintCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ver is None:
      raise TProtocol.TProtocolException(message='Required field ver is unset!')
    if self.cip is None:
      raise TProtocol.TProtocolException(message='Required field cip is unset!')
    if self.product is None:
      raise TProtocol.TProtocolException(message='Required field product is unset!')
    if self.combo is None:
      raise TProtocol.TProtocolException(message='Required field combo is unset!')
    if self.verify is None:
      raise TProtocol.TProtocolException(message='Required field verify is unset!')
    if self.rtname is None:
      raise TProtocol.TProtocolException(message='Required field rtname is unset!')
    if self.req is None:
      raise TProtocol.TProtocolException(message='Required field req is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ver)
    value = (value * 31) ^ hash(self.cip)
    value = (value * 31) ^ hash(self.product)
    value = (value * 31) ^ hash(self.combo)
    value = (value * 31) ^ hash(self.verify)
    value = (value * 31) ^ hash(self.rtname)
    value = (value * 31) ^ hash(self.req)
    value = (value * 31) ^ hash(self.log_id)
    value = (value * 31) ^ hash(self.hintCode)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RTMultiDelResponse:
  """
  Attributes:
   - ver
   - ret_code
   - ret_msg
   - keys
   - log_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'ver', None, None, ), # 1
    (2, TType.I32, 'ret_code', None, None, ), # 2
    (3, TType.STRING, 'ret_msg', None, None, ), # 3
    (4, TType.LIST, 'keys', (TType.STRUCT,(RTKeyInfo, RTKeyInfo.thrift_spec)), None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'log_id', None, None, ), # 20
  )

  def __init__(self, ver=None, ret_code=None, ret_msg=None, keys=None, log_id=None,):
    self.ver = ver
    self.ret_code = ret_code
    self.ret_msg = ret_msg
    self.keys = keys
    self.log_id = log_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.ver = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ret_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ret_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.keys = []
          (_etype54, _size51) = iprot.readListBegin()
          for _i55 in xrange(_size51):
            _elem56 = RTKeyInfo()
            _elem56.read(iprot)
            self.keys.append(_elem56)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.log_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RTMultiDelResponse')
    if self.ver is not None:
      oprot.writeFieldBegin('ver', TType.BYTE, 1)
      oprot.writeByte(self.ver)
      oprot.writeFieldEnd()
    if self.ret_code is not None:
      oprot.writeFieldBegin('ret_code', TType.I32, 2)
      oprot.writeI32(self.ret_code)
      oprot.writeFieldEnd()
    if self.ret_msg is not None:
      oprot.writeFieldBegin('ret_msg', TType.STRING, 3)
      oprot.writeString(self.ret_msg)
      oprot.writeFieldEnd()
    if self.keys is not None:
      oprot.writeFieldBegin('keys', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.keys))
      for iter57 in self.keys:
        iter57.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.log_id is not None:
      oprot.writeFieldBegin('log_id', TType.I64, 20)
      oprot.writeI64(self.log_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ver is None:
      raise TProtocol.TProtocolException(message='Required field ver is unset!')
    if self.ret_code is None:
      raise TProtocol.TProtocolException(message='Required field ret_code is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ver)
    value = (value * 31) ^ hash(self.ret_code)
    value = (value * 31) ^ hash(self.ret_msg)
    value = (value * 31) ^ hash(self.keys)
    value = (value * 31) ^ hash(self.log_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceException(TException):
  """
  Attributes:
   - errorMsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'errorMsg', None, None, ), # 1
  )

  def __init__(self, errorMsg=None,):
    self.errorMsg = errorMsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.errorMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceException')
    if self.errorMsg is not None:
      oprot.writeFieldBegin('errorMsg', TType.STRING, 1)
      oprot.writeString(self.errorMsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.errorMsg is None:
      raise TProtocol.TProtocolException(message='Required field errorMsg is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.errorMsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
