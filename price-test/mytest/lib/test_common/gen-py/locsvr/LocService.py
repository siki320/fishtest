#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def set_coord(self, biz, coords, coord_type):
    """
    Parameters:
     - biz
     - coords
     - coord_type
    """
    pass

  def get_coord(self, biz, uids, coord_type):
    """
    Parameters:
     - biz
     - uids
     - coord_type
    """
    pass

  def get_coord_extra(self, biz, uids, coord_type, filter):
    """
    Parameters:
     - biz
     - uids
     - coord_type
     - filter
    """
    pass

  def get_cid_by_uid(self, biz, uids):
    """
    Parameters:
     - biz
     - uids
    """
    pass

  def get_coord_cid_by_uid(self, biz, uids, coord_type):
    """
    Parameters:
     - biz
     - uids
     - coord_type
    """
    pass

  def get_cid_by_coord(self, coords, parm, coord_type):
    """
    Parameters:
     - coords
     - parm
     - coord_type
    """
    pass

  def get_cid_by_country(self, countryid):
    """
    Parameters:
     - countryid
    """
    pass

  def get_countyid_by_cid(self, cid):
    """
    Parameters:
     - cid
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def set_coord(self, biz, coords, coord_type):
    """
    Parameters:
     - biz
     - coords
     - coord_type
    """
    self.send_set_coord(biz, coords, coord_type)
    self.recv_set_coord()

  def send_set_coord(self, biz, coords, coord_type):
    self._oprot.writeMessageBegin('set_coord', TMessageType.CALL, self._seqid)
    args = set_coord_args()
    args.biz = biz
    args.coords = coords
    args.coord_type = coord_type
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_coord(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = set_coord_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.io is not None:
      raise result.io
    return

  def get_coord(self, biz, uids, coord_type):
    """
    Parameters:
     - biz
     - uids
     - coord_type
    """
    self.send_get_coord(biz, uids, coord_type)
    return self.recv_get_coord()

  def send_get_coord(self, biz, uids, coord_type):
    self._oprot.writeMessageBegin('get_coord', TMessageType.CALL, self._seqid)
    args = get_coord_args()
    args.biz = biz
    args.uids = uids
    args.coord_type = coord_type
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_coord(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_coord_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.io is not None:
      raise result.io
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_coord failed: unknown result");

  def get_coord_extra(self, biz, uids, coord_type, filter):
    """
    Parameters:
     - biz
     - uids
     - coord_type
     - filter
    """
    self.send_get_coord_extra(biz, uids, coord_type, filter)
    return self.recv_get_coord_extra()

  def send_get_coord_extra(self, biz, uids, coord_type, filter):
    self._oprot.writeMessageBegin('get_coord_extra', TMessageType.CALL, self._seqid)
    args = get_coord_extra_args()
    args.biz = biz
    args.uids = uids
    args.coord_type = coord_type
    args.filter = filter
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_coord_extra(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_coord_extra_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.io is not None:
      raise result.io
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_coord_extra failed: unknown result");

  def get_cid_by_uid(self, biz, uids):
    """
    Parameters:
     - biz
     - uids
    """
    self.send_get_cid_by_uid(biz, uids)
    return self.recv_get_cid_by_uid()

  def send_get_cid_by_uid(self, biz, uids):
    self._oprot.writeMessageBegin('get_cid_by_uid', TMessageType.CALL, self._seqid)
    args = get_cid_by_uid_args()
    args.biz = biz
    args.uids = uids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_cid_by_uid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_cid_by_uid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.io is not None:
      raise result.io
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_cid_by_uid failed: unknown result");

  def get_coord_cid_by_uid(self, biz, uids, coord_type):
    """
    Parameters:
     - biz
     - uids
     - coord_type
    """
    self.send_get_coord_cid_by_uid(biz, uids, coord_type)
    return self.recv_get_coord_cid_by_uid()

  def send_get_coord_cid_by_uid(self, biz, uids, coord_type):
    self._oprot.writeMessageBegin('get_coord_cid_by_uid', TMessageType.CALL, self._seqid)
    args = get_coord_cid_by_uid_args()
    args.biz = biz
    args.uids = uids
    args.coord_type = coord_type
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_coord_cid_by_uid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_coord_cid_by_uid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.io is not None:
      raise result.io
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_coord_cid_by_uid failed: unknown result");

  def get_cid_by_coord(self, coords, parm, coord_type):
    """
    Parameters:
     - coords
     - parm
     - coord_type
    """
    self.send_get_cid_by_coord(coords, parm, coord_type)
    return self.recv_get_cid_by_coord()

  def send_get_cid_by_coord(self, coords, parm, coord_type):
    self._oprot.writeMessageBegin('get_cid_by_coord', TMessageType.CALL, self._seqid)
    args = get_cid_by_coord_args()
    args.coords = coords
    args.parm = parm
    args.coord_type = coord_type
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_cid_by_coord(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_cid_by_coord_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.io is not None:
      raise result.io
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_cid_by_coord failed: unknown result");

  def get_cid_by_country(self, countryid):
    """
    Parameters:
     - countryid
    """
    self.send_get_cid_by_country(countryid)
    return self.recv_get_cid_by_country()

  def send_get_cid_by_country(self, countryid):
    self._oprot.writeMessageBegin('get_cid_by_country', TMessageType.CALL, self._seqid)
    args = get_cid_by_country_args()
    args.countryid = countryid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_cid_by_country(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_cid_by_country_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.io is not None:
      raise result.io
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_cid_by_country failed: unknown result");

  def get_countyid_by_cid(self, cid):
    """
    Parameters:
     - cid
    """
    self.send_get_countyid_by_cid(cid)
    return self.recv_get_countyid_by_cid()

  def send_get_countyid_by_cid(self, cid):
    self._oprot.writeMessageBegin('get_countyid_by_cid', TMessageType.CALL, self._seqid)
    args = get_countyid_by_cid_args()
    args.cid = cid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_countyid_by_cid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_countyid_by_cid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.io is not None:
      raise result.io
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_countyid_by_cid failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["set_coord"] = Processor.process_set_coord
    self._processMap["get_coord"] = Processor.process_get_coord
    self._processMap["get_coord_extra"] = Processor.process_get_coord_extra
    self._processMap["get_cid_by_uid"] = Processor.process_get_cid_by_uid
    self._processMap["get_coord_cid_by_uid"] = Processor.process_get_coord_cid_by_uid
    self._processMap["get_cid_by_coord"] = Processor.process_get_cid_by_coord
    self._processMap["get_cid_by_country"] = Processor.process_get_cid_by_country
    self._processMap["get_countyid_by_cid"] = Processor.process_get_countyid_by_cid

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_set_coord(self, seqid, iprot, oprot):
    args = set_coord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_coord_result()
    try:
      self._handler.set_coord(args.biz, args.coords, args.coord_type)
    except LocsvrException as io:
      result.io = io
    oprot.writeMessageBegin("set_coord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_coord(self, seqid, iprot, oprot):
    args = get_coord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_coord_result()
    try:
      result.success = self._handler.get_coord(args.biz, args.uids, args.coord_type)
    except LocsvrException as io:
      result.io = io
    oprot.writeMessageBegin("get_coord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_coord_extra(self, seqid, iprot, oprot):
    args = get_coord_extra_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_coord_extra_result()
    try:
      result.success = self._handler.get_coord_extra(args.biz, args.uids, args.coord_type, args.filter)
    except LocsvrException as io:
      result.io = io
    oprot.writeMessageBegin("get_coord_extra", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_cid_by_uid(self, seqid, iprot, oprot):
    args = get_cid_by_uid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_cid_by_uid_result()
    try:
      result.success = self._handler.get_cid_by_uid(args.biz, args.uids)
    except LocsvrException as io:
      result.io = io
    oprot.writeMessageBegin("get_cid_by_uid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_coord_cid_by_uid(self, seqid, iprot, oprot):
    args = get_coord_cid_by_uid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_coord_cid_by_uid_result()
    try:
      result.success = self._handler.get_coord_cid_by_uid(args.biz, args.uids, args.coord_type)
    except LocsvrException as io:
      result.io = io
    oprot.writeMessageBegin("get_coord_cid_by_uid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_cid_by_coord(self, seqid, iprot, oprot):
    args = get_cid_by_coord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_cid_by_coord_result()
    try:
      result.success = self._handler.get_cid_by_coord(args.coords, args.parm, args.coord_type)
    except LocsvrException as io:
      result.io = io
    oprot.writeMessageBegin("get_cid_by_coord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_cid_by_country(self, seqid, iprot, oprot):
    args = get_cid_by_country_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_cid_by_country_result()
    try:
      result.success = self._handler.get_cid_by_country(args.countryid)
    except LocsvrException as io:
      result.io = io
    oprot.writeMessageBegin("get_cid_by_country", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_countyid_by_cid(self, seqid, iprot, oprot):
    args = get_countyid_by_cid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_countyid_by_cid_result()
    try:
      result.success = self._handler.get_countyid_by_cid(args.cid)
    except LocsvrException as io:
      result.io = io
    oprot.writeMessageBegin("get_countyid_by_cid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class set_coord_args:
  """
  Attributes:
   - biz
   - coords
   - coord_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'biz', (Business, Business.thrift_spec), None, ), # 1
    (2, TType.LIST, 'coords', (TType.STRUCT,(CoordinateBean, CoordinateBean.thrift_spec)), None, ), # 2
    (3, TType.I32, 'coord_type', None, None, ), # 3
  )

  def __init__(self, biz=None, coords=None, coord_type=None,):
    self.biz = biz
    self.coords = coords
    self.coord_type = coord_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.biz = Business()
          self.biz.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.coords = []
          (_etype12, _size9) = iprot.readListBegin()
          for _i13 in xrange(_size9):
            _elem14 = CoordinateBean()
            _elem14.read(iprot)
            self.coords.append(_elem14)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.coord_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_coord_args')
    if self.biz is not None:
      oprot.writeFieldBegin('biz', TType.STRUCT, 1)
      self.biz.write(oprot)
      oprot.writeFieldEnd()
    if self.coords is not None:
      oprot.writeFieldBegin('coords', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.coords))
      for iter15 in self.coords:
        iter15.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.coord_type is not None:
      oprot.writeFieldBegin('coord_type', TType.I32, 3)
      oprot.writeI32(self.coord_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_coord_result:
  """
  Attributes:
   - io
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'io', (LocsvrException, LocsvrException.thrift_spec), None, ), # 1
  )

  def __init__(self, io=None,):
    self.io = io

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.io = LocsvrException()
          self.io.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_coord_result')
    if self.io is not None:
      oprot.writeFieldBegin('io', TType.STRUCT, 1)
      self.io.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_coord_args:
  """
  Attributes:
   - biz
   - uids
   - coord_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'biz', (Business, Business.thrift_spec), None, ), # 1
    (2, TType.LIST, 'uids', (TType.I64,None), None, ), # 2
    (3, TType.I32, 'coord_type', None, None, ), # 3
  )

  def __init__(self, biz=None, uids=None, coord_type=None,):
    self.biz = biz
    self.uids = uids
    self.coord_type = coord_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.biz = Business()
          self.biz.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = iprot.readI64();
            self.uids.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.coord_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_coord_args')
    if self.biz is not None:
      oprot.writeFieldBegin('biz', TType.STRUCT, 1)
      self.biz.write(oprot)
      oprot.writeFieldEnd()
    if self.uids is not None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.uids))
      for iter22 in self.uids:
        oprot.writeI64(iter22)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.coord_type is not None:
      oprot.writeFieldBegin('coord_type', TType.I32, 3)
      oprot.writeI32(self.coord_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_coord_result:
  """
  Attributes:
   - success
   - io
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(CoordinateBean, CoordinateBean.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'io', (LocsvrException, LocsvrException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, io=None,):
    self.success = success
    self.io = io

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype24, _vtype25, _size23 ) = iprot.readMapBegin() 
          for _i27 in xrange(_size23):
            _key28 = iprot.readI64();
            _val29 = CoordinateBean()
            _val29.read(iprot)
            self.success[_key28] = _val29
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.io = LocsvrException()
          self.io.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_coord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter30,viter31 in self.success.items():
        oprot.writeI64(kiter30)
        viter31.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.io is not None:
      oprot.writeFieldBegin('io', TType.STRUCT, 1)
      self.io.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_coord_extra_args:
  """
  Attributes:
   - biz
   - uids
   - coord_type
   - filter
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'biz', (Business, Business.thrift_spec), None, ), # 1
    (2, TType.LIST, 'uids', (TType.I64,None), None, ), # 2
    (3, TType.I32, 'coord_type', None, None, ), # 3
    (4, TType.STRUCT, 'filter', (Filter, Filter.thrift_spec), None, ), # 4
  )

  def __init__(self, biz=None, uids=None, coord_type=None, filter=None,):
    self.biz = biz
    self.uids = uids
    self.coord_type = coord_type
    self.filter = filter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.biz = Business()
          self.biz.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = iprot.readI64();
            self.uids.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.coord_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.filter = Filter()
          self.filter.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_coord_extra_args')
    if self.biz is not None:
      oprot.writeFieldBegin('biz', TType.STRUCT, 1)
      self.biz.write(oprot)
      oprot.writeFieldEnd()
    if self.uids is not None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.uids))
      for iter38 in self.uids:
        oprot.writeI64(iter38)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.coord_type is not None:
      oprot.writeFieldBegin('coord_type', TType.I32, 3)
      oprot.writeI32(self.coord_type)
      oprot.writeFieldEnd()
    if self.filter is not None:
      oprot.writeFieldBegin('filter', TType.STRUCT, 4)
      self.filter.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_coord_extra_result:
  """
  Attributes:
   - success
   - io
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(CoordinateBean, CoordinateBean.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'io', (LocsvrException, LocsvrException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, io=None,):
    self.success = success
    self.io = io

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype40, _vtype41, _size39 ) = iprot.readMapBegin() 
          for _i43 in xrange(_size39):
            _key44 = iprot.readI64();
            _val45 = CoordinateBean()
            _val45.read(iprot)
            self.success[_key44] = _val45
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.io = LocsvrException()
          self.io.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_coord_extra_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter46,viter47 in self.success.items():
        oprot.writeI64(kiter46)
        viter47.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.io is not None:
      oprot.writeFieldBegin('io', TType.STRUCT, 1)
      self.io.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_cid_by_uid_args:
  """
  Attributes:
   - biz
   - uids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'biz', (Business, Business.thrift_spec), None, ), # 1
    (2, TType.LIST, 'uids', (TType.I64,None), None, ), # 2
  )

  def __init__(self, biz=None, uids=None,):
    self.biz = biz
    self.uids = uids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.biz = Business()
          self.biz.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = iprot.readI64();
            self.uids.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_cid_by_uid_args')
    if self.biz is not None:
      oprot.writeFieldBegin('biz', TType.STRUCT, 1)
      self.biz.write(oprot)
      oprot.writeFieldEnd()
    if self.uids is not None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.uids))
      for iter54 in self.uids:
        oprot.writeI64(iter54)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_cid_by_uid_result:
  """
  Attributes:
   - success
   - io
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(CityinfoBean, CityinfoBean.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'io', (LocsvrException, LocsvrException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, io=None,):
    self.success = success
    self.io = io

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype56, _vtype57, _size55 ) = iprot.readMapBegin() 
          for _i59 in xrange(_size55):
            _key60 = iprot.readI64();
            _val61 = CityinfoBean()
            _val61.read(iprot)
            self.success[_key60] = _val61
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.io = LocsvrException()
          self.io.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_cid_by_uid_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter62,viter63 in self.success.items():
        oprot.writeI64(kiter62)
        viter63.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.io is not None:
      oprot.writeFieldBegin('io', TType.STRUCT, 1)
      self.io.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_coord_cid_by_uid_args:
  """
  Attributes:
   - biz
   - uids
   - coord_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'biz', (Business, Business.thrift_spec), None, ), # 1
    (2, TType.LIST, 'uids', (TType.I64,None), None, ), # 2
    (3, TType.I32, 'coord_type', None, None, ), # 3
  )

  def __init__(self, biz=None, uids=None, coord_type=None,):
    self.biz = biz
    self.uids = uids
    self.coord_type = coord_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.biz = Business()
          self.biz.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype67, _size64) = iprot.readListBegin()
          for _i68 in xrange(_size64):
            _elem69 = iprot.readI64();
            self.uids.append(_elem69)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.coord_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_coord_cid_by_uid_args')
    if self.biz is not None:
      oprot.writeFieldBegin('biz', TType.STRUCT, 1)
      self.biz.write(oprot)
      oprot.writeFieldEnd()
    if self.uids is not None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.uids))
      for iter70 in self.uids:
        oprot.writeI64(iter70)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.coord_type is not None:
      oprot.writeFieldBegin('coord_type', TType.I32, 3)
      oprot.writeI32(self.coord_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_coord_cid_by_uid_result:
  """
  Attributes:
   - success
   - io
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(CoordinateCityinfoBean, CoordinateCityinfoBean.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'io', (LocsvrException, LocsvrException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, io=None,):
    self.success = success
    self.io = io

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype72, _vtype73, _size71 ) = iprot.readMapBegin() 
          for _i75 in xrange(_size71):
            _key76 = iprot.readI64();
            _val77 = CoordinateCityinfoBean()
            _val77.read(iprot)
            self.success[_key76] = _val77
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.io = LocsvrException()
          self.io.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_coord_cid_by_uid_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter78,viter79 in self.success.items():
        oprot.writeI64(kiter78)
        viter79.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.io is not None:
      oprot.writeFieldBegin('io', TType.STRUCT, 1)
      self.io.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_cid_by_coord_args:
  """
  Attributes:
   - coords
   - parm
   - coord_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'coords', (TType.STRUCT,(Coordinate, Coordinate.thrift_spec)), None, ), # 1
    (2, TType.I32, 'parm', None, None, ), # 2
    (3, TType.I32, 'coord_type', None, None, ), # 3
  )

  def __init__(self, coords=None, parm=None, coord_type=None,):
    self.coords = coords
    self.parm = parm
    self.coord_type = coord_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.coords = []
          (_etype83, _size80) = iprot.readListBegin()
          for _i84 in xrange(_size80):
            _elem85 = Coordinate()
            _elem85.read(iprot)
            self.coords.append(_elem85)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.parm = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.coord_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_cid_by_coord_args')
    if self.coords is not None:
      oprot.writeFieldBegin('coords', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.coords))
      for iter86 in self.coords:
        iter86.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.parm is not None:
      oprot.writeFieldBegin('parm', TType.I32, 2)
      oprot.writeI32(self.parm)
      oprot.writeFieldEnd()
    if self.coord_type is not None:
      oprot.writeFieldBegin('coord_type', TType.I32, 3)
      oprot.writeI32(self.coord_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_cid_by_coord_result:
  """
  Attributes:
   - success
   - io
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Cityinfo, Cityinfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'io', (LocsvrException, LocsvrException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, io=None,):
    self.success = success
    self.io = io

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype90, _size87) = iprot.readListBegin()
          for _i91 in xrange(_size87):
            _elem92 = Cityinfo()
            _elem92.read(iprot)
            self.success.append(_elem92)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.io = LocsvrException()
          self.io.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_cid_by_coord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter93 in self.success:
        iter93.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.io is not None:
      oprot.writeFieldBegin('io', TType.STRUCT, 1)
      self.io.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_cid_by_country_args:
  """
  Attributes:
   - countryid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'countryid', None, None, ), # 1
  )

  def __init__(self, countryid=None,):
    self.countryid = countryid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.countryid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_cid_by_country_args')
    if self.countryid is not None:
      oprot.writeFieldBegin('countryid', TType.I32, 1)
      oprot.writeI32(self.countryid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_cid_by_country_result:
  """
  Attributes:
   - success
   - io
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Cityinfo, Cityinfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'io', (LocsvrException, LocsvrException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, io=None,):
    self.success = success
    self.io = io

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype97, _size94) = iprot.readListBegin()
          for _i98 in xrange(_size94):
            _elem99 = Cityinfo()
            _elem99.read(iprot)
            self.success.append(_elem99)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.io = LocsvrException()
          self.io.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_cid_by_country_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter100 in self.success:
        iter100.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.io is not None:
      oprot.writeFieldBegin('io', TType.STRUCT, 1)
      self.io.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_countyid_by_cid_args:
  """
  Attributes:
   - cid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cid', None, None, ), # 1
  )

  def __init__(self, cid=None,):
    self.cid = cid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_countyid_by_cid_args')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I32, 1)
      oprot.writeI32(self.cid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_countyid_by_cid_result:
  """
  Attributes:
   - success
   - io
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Cityinfo, Cityinfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'io', (LocsvrException, LocsvrException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, io=None,):
    self.success = success
    self.io = io

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype104, _size101) = iprot.readListBegin()
          for _i105 in xrange(_size101):
            _elem106 = Cityinfo()
            _elem106.read(iprot)
            self.success.append(_elem106)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.io = LocsvrException()
          self.io.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_countyid_by_cid_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter107 in self.success:
        iter107.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.io is not None:
      oprot.writeFieldBegin('io', TType.STRUCT, 1)
      self.io.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
