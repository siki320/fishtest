#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class RequireLevel:
  SHUSHI = 100
  HAOHUA = 200
  SHANGWU = 400
  JINGJI = 500
  KUAICHE = 600
  DACHE = 1000

  _VALUES_TO_NAMES = {
    100: "SHUSHI",
    200: "HAOHUA",
    400: "SHANGWU",
    500: "JINGJI",
    600: "KUAICHE",
    1000: "DACHE",
  }

  _NAMES_TO_VALUES = {
    "SHUSHI": 100,
    "HAOHUA": 200,
    "SHANGWU": 400,
    "JINGJI": 500,
    "KUAICHE": 600,
    "DACHE": 1000,
  }


class StationInfo:
  """
  Attributes:
   - uid
   - lng
   - lat
   - name
   - address
   - mis_id_list
   - count_down_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.DOUBLE, 'lng', None, None, ), # 2
    (3, TType.DOUBLE, 'lat', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.STRING, 'address', None, None, ), # 5
    (6, TType.LIST, 'mis_id_list', (TType.STRING,None), None, ), # 6
    (7, TType.I32, 'count_down_time', None, None, ), # 7
  )

  def __init__(self, uid=None, lng=None, lat=None, name=None, address=None, mis_id_list=None, count_down_time=None,):
    self.uid = uid
    self.lng = lng
    self.lat = lat
    self.name = name
    self.address = address
    self.mis_id_list = mis_id_list
    self.count_down_time = count_down_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.lng = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.lat = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.address = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.mis_id_list = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString()
            self.mis_id_list.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.count_down_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StationInfo')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.lng is not None:
      oprot.writeFieldBegin('lng', TType.DOUBLE, 2)
      oprot.writeDouble(self.lng)
      oprot.writeFieldEnd()
    if self.lat is not None:
      oprot.writeFieldBegin('lat', TType.DOUBLE, 3)
      oprot.writeDouble(self.lat)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 5)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.mis_id_list is not None:
      oprot.writeFieldBegin('mis_id_list', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.mis_id_list))
      for iter6 in self.mis_id_list:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.count_down_time is not None:
      oprot.writeFieldBegin('count_down_time', TType.I32, 7)
      oprot.writeI32(self.count_down_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.lng)
    value = (value * 31) ^ hash(self.lat)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.address)
    value = (value * 31) ^ hash(self.mis_id_list)
    value = (value * 31) ^ hash(self.count_down_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqInfo:
  """
  Attributes:
   - isneed_dynamic_price
   - product_id
   - area
   - target_user
   - type
   - pre_total_fee
   - flat
   - flng
   - starting_name
   - tlat
   - tlng
   - dest_name
   - setuptime
   - status
   - passengerid
   - require_level
   - tip
   - test_type
   - dp_key_id
   - datatype
   - fake_request
   - combo_type
   - start_dest_lumian_distance
   - newbie_order
   - is_in_limit_region
   - oneprice
   - pre_total_fee_double_type
   - station_list
   - origin_product_id
   - passenger_phone
   - req_type
   - pre_finish_time
   - user_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'isneed_dynamic_price', None, None, ), # 1
    (2, TType.I32, 'product_id', None, None, ), # 2
    (3, TType.I32, 'area', None, None, ), # 3
    (4, TType.I32, 'target_user', None, None, ), # 4
    (5, TType.I32, 'type', None, None, ), # 5
    (6, TType.I32, 'pre_total_fee', None, None, ), # 6
    (7, TType.DOUBLE, 'flat', None, None, ), # 7
    (8, TType.DOUBLE, 'flng', None, None, ), # 8
    (9, TType.STRING, 'starting_name', None, None, ), # 9
    (10, TType.DOUBLE, 'tlat', None, None, ), # 10
    (11, TType.DOUBLE, 'tlng', None, None, ), # 11
    (12, TType.STRING, 'dest_name', None, None, ), # 12
    (13, TType.I32, 'setuptime', None, None, ), # 13
    (14, TType.I32, 'status', None, None, ), # 14
    (15, TType.I64, 'passengerid', None, None, ), # 15
    (16, TType.STRING, 'require_level', None, None, ), # 16
    (17, TType.I32, 'tip', None, None, ), # 17
    (18, TType.I32, 'test_type', None, None, ), # 18
    (19, TType.STRING, 'dp_key_id', None, None, ), # 19
    (20, TType.STRING, 'datatype', None, None, ), # 20
    (21, TType.I32, 'fake_request', None, None, ), # 21
    (22, TType.I32, 'combo_type', None, None, ), # 22
    (23, TType.I32, 'start_dest_lumian_distance', None, None, ), # 23
    (24, TType.I32, 'newbie_order', None, None, ), # 24
    (25, TType.I32, 'is_in_limit_region', None, None, ), # 25
    (26, TType.I32, 'oneprice', None, None, ), # 26
    (27, TType.DOUBLE, 'pre_total_fee_double_type', None, None, ), # 27
    (28, TType.LIST, 'station_list', (TType.STRUCT,(StationInfo, StationInfo.thrift_spec)), None, ), # 28
    (29, TType.I32, 'origin_product_id', None, None, ), # 29
    (30, TType.STRING, 'passenger_phone', None, None, ), # 30
    (31, TType.I32, 'req_type', None, None, ), # 31
    (32, TType.I32, 'pre_finish_time', None, None, ), # 32
    (33, TType.I32, 'user_type', None, None, ), # 33
  )

  def __init__(self, isneed_dynamic_price=None, product_id=None, area=None, target_user=None, type=None, pre_total_fee=None, flat=None, flng=None, starting_name=None, tlat=None, tlng=None, dest_name=None, setuptime=None, status=None, passengerid=None, require_level=None, tip=None, test_type=None, dp_key_id=None, datatype=None, fake_request=None, combo_type=None, start_dest_lumian_distance=None, newbie_order=None, is_in_limit_region=None, oneprice=None, pre_total_fee_double_type=None, station_list=None, origin_product_id=None, passenger_phone=None, req_type=None, pre_finish_time=None, user_type=None,):
    self.isneed_dynamic_price = isneed_dynamic_price
    self.product_id = product_id
    self.area = area
    self.target_user = target_user
    self.type = type
    self.pre_total_fee = pre_total_fee
    self.flat = flat
    self.flng = flng
    self.starting_name = starting_name
    self.tlat = tlat
    self.tlng = tlng
    self.dest_name = dest_name
    self.setuptime = setuptime
    self.status = status
    self.passengerid = passengerid
    self.require_level = require_level
    self.tip = tip
    self.test_type = test_type
    self.dp_key_id = dp_key_id
    self.datatype = datatype
    self.fake_request = fake_request
    self.combo_type = combo_type
    self.start_dest_lumian_distance = start_dest_lumian_distance
    self.newbie_order = newbie_order
    self.is_in_limit_region = is_in_limit_region
    self.oneprice = oneprice
    self.pre_total_fee_double_type = pre_total_fee_double_type
    self.station_list = station_list
    self.origin_product_id = origin_product_id
    self.passenger_phone = passenger_phone
    self.req_type = req_type
    self.pre_finish_time = pre_finish_time
    self.user_type = user_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.isneed_dynamic_price = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.product_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.area = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.target_user = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.pre_total_fee = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.flat = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.flng = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.starting_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.tlat = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.tlng = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.dest_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.setuptime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.passengerid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.require_level = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.tip = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.test_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.dp_key_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.datatype = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.fake_request = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.combo_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.start_dest_lumian_distance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.newbie_order = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.is_in_limit_region = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.oneprice = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.DOUBLE:
          self.pre_total_fee_double_type = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.LIST:
          self.station_list = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = StationInfo()
            _elem12.read(iprot)
            self.station_list.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.origin_product_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.passenger_phone = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.req_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.pre_finish_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.user_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqInfo')
    if self.isneed_dynamic_price is not None:
      oprot.writeFieldBegin('isneed_dynamic_price', TType.BOOL, 1)
      oprot.writeBool(self.isneed_dynamic_price)
      oprot.writeFieldEnd()
    if self.product_id is not None:
      oprot.writeFieldBegin('product_id', TType.I32, 2)
      oprot.writeI32(self.product_id)
      oprot.writeFieldEnd()
    if self.area is not None:
      oprot.writeFieldBegin('area', TType.I32, 3)
      oprot.writeI32(self.area)
      oprot.writeFieldEnd()
    if self.target_user is not None:
      oprot.writeFieldBegin('target_user', TType.I32, 4)
      oprot.writeI32(self.target_user)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 5)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.pre_total_fee is not None:
      oprot.writeFieldBegin('pre_total_fee', TType.I32, 6)
      oprot.writeI32(self.pre_total_fee)
      oprot.writeFieldEnd()
    if self.flat is not None:
      oprot.writeFieldBegin('flat', TType.DOUBLE, 7)
      oprot.writeDouble(self.flat)
      oprot.writeFieldEnd()
    if self.flng is not None:
      oprot.writeFieldBegin('flng', TType.DOUBLE, 8)
      oprot.writeDouble(self.flng)
      oprot.writeFieldEnd()
    if self.starting_name is not None:
      oprot.writeFieldBegin('starting_name', TType.STRING, 9)
      oprot.writeString(self.starting_name)
      oprot.writeFieldEnd()
    if self.tlat is not None:
      oprot.writeFieldBegin('tlat', TType.DOUBLE, 10)
      oprot.writeDouble(self.tlat)
      oprot.writeFieldEnd()
    if self.tlng is not None:
      oprot.writeFieldBegin('tlng', TType.DOUBLE, 11)
      oprot.writeDouble(self.tlng)
      oprot.writeFieldEnd()
    if self.dest_name is not None:
      oprot.writeFieldBegin('dest_name', TType.STRING, 12)
      oprot.writeString(self.dest_name)
      oprot.writeFieldEnd()
    if self.setuptime is not None:
      oprot.writeFieldBegin('setuptime', TType.I32, 13)
      oprot.writeI32(self.setuptime)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 14)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.passengerid is not None:
      oprot.writeFieldBegin('passengerid', TType.I64, 15)
      oprot.writeI64(self.passengerid)
      oprot.writeFieldEnd()
    if self.require_level is not None:
      oprot.writeFieldBegin('require_level', TType.STRING, 16)
      oprot.writeString(self.require_level)
      oprot.writeFieldEnd()
    if self.tip is not None:
      oprot.writeFieldBegin('tip', TType.I32, 17)
      oprot.writeI32(self.tip)
      oprot.writeFieldEnd()
    if self.test_type is not None:
      oprot.writeFieldBegin('test_type', TType.I32, 18)
      oprot.writeI32(self.test_type)
      oprot.writeFieldEnd()
    if self.dp_key_id is not None:
      oprot.writeFieldBegin('dp_key_id', TType.STRING, 19)
      oprot.writeString(self.dp_key_id)
      oprot.writeFieldEnd()
    if self.datatype is not None:
      oprot.writeFieldBegin('datatype', TType.STRING, 20)
      oprot.writeString(self.datatype)
      oprot.writeFieldEnd()
    if self.fake_request is not None:
      oprot.writeFieldBegin('fake_request', TType.I32, 21)
      oprot.writeI32(self.fake_request)
      oprot.writeFieldEnd()
    if self.combo_type is not None:
      oprot.writeFieldBegin('combo_type', TType.I32, 22)
      oprot.writeI32(self.combo_type)
      oprot.writeFieldEnd()
    if self.start_dest_lumian_distance is not None:
      oprot.writeFieldBegin('start_dest_lumian_distance', TType.I32, 23)
      oprot.writeI32(self.start_dest_lumian_distance)
      oprot.writeFieldEnd()
    if self.newbie_order is not None:
      oprot.writeFieldBegin('newbie_order', TType.I32, 24)
      oprot.writeI32(self.newbie_order)
      oprot.writeFieldEnd()
    if self.is_in_limit_region is not None:
      oprot.writeFieldBegin('is_in_limit_region', TType.I32, 25)
      oprot.writeI32(self.is_in_limit_region)
      oprot.writeFieldEnd()
    if self.oneprice is not None:
      oprot.writeFieldBegin('oneprice', TType.I32, 26)
      oprot.writeI32(self.oneprice)
      oprot.writeFieldEnd()
    if self.pre_total_fee_double_type is not None:
      oprot.writeFieldBegin('pre_total_fee_double_type', TType.DOUBLE, 27)
      oprot.writeDouble(self.pre_total_fee_double_type)
      oprot.writeFieldEnd()
    if self.station_list is not None:
      oprot.writeFieldBegin('station_list', TType.LIST, 28)
      oprot.writeListBegin(TType.STRUCT, len(self.station_list))
      for iter13 in self.station_list:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.origin_product_id is not None:
      oprot.writeFieldBegin('origin_product_id', TType.I32, 29)
      oprot.writeI32(self.origin_product_id)
      oprot.writeFieldEnd()
    if self.passenger_phone is not None:
      oprot.writeFieldBegin('passenger_phone', TType.STRING, 30)
      oprot.writeString(self.passenger_phone)
      oprot.writeFieldEnd()
    if self.req_type is not None:
      oprot.writeFieldBegin('req_type', TType.I32, 31)
      oprot.writeI32(self.req_type)
      oprot.writeFieldEnd()
    if self.pre_finish_time is not None:
      oprot.writeFieldBegin('pre_finish_time', TType.I32, 32)
      oprot.writeI32(self.pre_finish_time)
      oprot.writeFieldEnd()
    if self.user_type is not None:
      oprot.writeFieldBegin('user_type', TType.I32, 33)
      oprot.writeI32(self.user_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.isneed_dynamic_price)
    value = (value * 31) ^ hash(self.product_id)
    value = (value * 31) ^ hash(self.area)
    value = (value * 31) ^ hash(self.target_user)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.pre_total_fee)
    value = (value * 31) ^ hash(self.flat)
    value = (value * 31) ^ hash(self.flng)
    value = (value * 31) ^ hash(self.starting_name)
    value = (value * 31) ^ hash(self.tlat)
    value = (value * 31) ^ hash(self.tlng)
    value = (value * 31) ^ hash(self.dest_name)
    value = (value * 31) ^ hash(self.setuptime)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.passengerid)
    value = (value * 31) ^ hash(self.require_level)
    value = (value * 31) ^ hash(self.tip)
    value = (value * 31) ^ hash(self.test_type)
    value = (value * 31) ^ hash(self.dp_key_id)
    value = (value * 31) ^ hash(self.datatype)
    value = (value * 31) ^ hash(self.fake_request)
    value = (value * 31) ^ hash(self.combo_type)
    value = (value * 31) ^ hash(self.start_dest_lumian_distance)
    value = (value * 31) ^ hash(self.newbie_order)
    value = (value * 31) ^ hash(self.is_in_limit_region)
    value = (value * 31) ^ hash(self.oneprice)
    value = (value * 31) ^ hash(self.pre_total_fee_double_type)
    value = (value * 31) ^ hash(self.station_list)
    value = (value * 31) ^ hash(self.origin_product_id)
    value = (value * 31) ^ hash(self.passenger_phone)
    value = (value * 31) ^ hash(self.req_type)
    value = (value * 31) ^ hash(self.pre_finish_time)
    value = (value * 31) ^ hash(self.user_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubPriceRes:
  """
  Attributes:
   - arrive_time
   - dynamic_price
   - dynamic_type
   - dynamic_kind
   - unit_price
   - near_driver_num
   - near_order_num
   - assign_driver_num
   - assign_driver_mode_num
   - place
   - dynamic_price_id
   - if_use_times
   - dynamic_times
   - rank_probability
   - dynamic_discount
   - feature_str
   - dimi_prob
   - wait_discount
   - wait_minute
   - avg_driver_start_distance
   - nearest_1_driver_start_distance
   - nearest_3_driver_start_distance
   - one_dynamic_discount
   - two_dynamic_discount
   - three_dynamic_discount
   - start_dest_distance
   - station_straight_cut
   - station_discount
   - station_discount_max_fee
   - dynamic_price_for_carpool
   - dynamic_times_for_carpool
   - predict_carpool_rate
   - predict_carpool_profit_rate
   - predict_carpool_intention
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'arrive_time', None, None, ), # 1
    (2, TType.I32, 'dynamic_price', None, None, ), # 2
    (3, TType.I32, 'dynamic_type', None, None, ), # 3
    (4, TType.I32, 'dynamic_kind', None, None, ), # 4
    (5, TType.DOUBLE, 'unit_price', None, None, ), # 5
    (6, TType.I32, 'near_driver_num', None, None, ), # 6
    (7, TType.I32, 'near_order_num', None, None, ), # 7
    (8, TType.I32, 'assign_driver_num', None, None, ), # 8
    (9, TType.I32, 'assign_driver_mode_num', None, None, ), # 9
    (10, TType.I32, 'place', None, None, ), # 10
    (11, TType.STRING, 'dynamic_price_id', None, None, ), # 11
    (12, TType.I32, 'if_use_times', None, None, ), # 12
    (13, TType.STRING, 'dynamic_times', None, None, ), # 13
    (14, TType.DOUBLE, 'rank_probability', None, None, ), # 14
    (15, TType.DOUBLE, 'dynamic_discount', None, None, ), # 15
    (16, TType.STRING, 'feature_str', None, None, ), # 16
    (17, TType.DOUBLE, 'dimi_prob', None, None, ), # 17
    (18, TType.DOUBLE, 'wait_discount', None, None, ), # 18
    (19, TType.I32, 'wait_minute', None, None, ), # 19
    (20, TType.I32, 'avg_driver_start_distance', None, None, ), # 20
    (21, TType.I32, 'nearest_1_driver_start_distance', None, None, ), # 21
    (22, TType.I32, 'nearest_3_driver_start_distance', None, None, ), # 22
    (23, TType.DOUBLE, 'one_dynamic_discount', None, None, ), # 23
    (24, TType.DOUBLE, 'two_dynamic_discount', None, None, ), # 24
    (25, TType.DOUBLE, 'three_dynamic_discount', None, None, ), # 25
    (26, TType.I32, 'start_dest_distance', None, None, ), # 26
    (27, TType.DOUBLE, 'station_straight_cut', None, None, ), # 27
    (28, TType.DOUBLE, 'station_discount', None, None, ), # 28
    (29, TType.DOUBLE, 'station_discount_max_fee', None, None, ), # 29
    (30, TType.I32, 'dynamic_price_for_carpool', None, None, ), # 30
    (31, TType.STRING, 'dynamic_times_for_carpool', None, None, ), # 31
    (32, TType.DOUBLE, 'predict_carpool_rate', None, None, ), # 32
    (33, TType.DOUBLE, 'predict_carpool_profit_rate', None, None, ), # 33
    (34, TType.DOUBLE, 'predict_carpool_intention', None, None, ), # 34
  )

  def __init__(self, arrive_time=None, dynamic_price=None, dynamic_type=None, dynamic_kind=None, unit_price=None, near_driver_num=None, near_order_num=None, assign_driver_num=None, assign_driver_mode_num=None, place=None, dynamic_price_id=None, if_use_times=None, dynamic_times=None, rank_probability=None, dynamic_discount=None, feature_str=None, dimi_prob=None, wait_discount=None, wait_minute=None, avg_driver_start_distance=None, nearest_1_driver_start_distance=None, nearest_3_driver_start_distance=None, one_dynamic_discount=None, two_dynamic_discount=None, three_dynamic_discount=None, start_dest_distance=None, station_straight_cut=None, station_discount=None, station_discount_max_fee=None, dynamic_price_for_carpool=None, dynamic_times_for_carpool=None, predict_carpool_rate=None, predict_carpool_profit_rate=None, predict_carpool_intention=None,):
    self.arrive_time = arrive_time
    self.dynamic_price = dynamic_price
    self.dynamic_type = dynamic_type
    self.dynamic_kind = dynamic_kind
    self.unit_price = unit_price
    self.near_driver_num = near_driver_num
    self.near_order_num = near_order_num
    self.assign_driver_num = assign_driver_num
    self.assign_driver_mode_num = assign_driver_mode_num
    self.place = place
    self.dynamic_price_id = dynamic_price_id
    self.if_use_times = if_use_times
    self.dynamic_times = dynamic_times
    self.rank_probability = rank_probability
    self.dynamic_discount = dynamic_discount
    self.feature_str = feature_str
    self.dimi_prob = dimi_prob
    self.wait_discount = wait_discount
    self.wait_minute = wait_minute
    self.avg_driver_start_distance = avg_driver_start_distance
    self.nearest_1_driver_start_distance = nearest_1_driver_start_distance
    self.nearest_3_driver_start_distance = nearest_3_driver_start_distance
    self.one_dynamic_discount = one_dynamic_discount
    self.two_dynamic_discount = two_dynamic_discount
    self.three_dynamic_discount = three_dynamic_discount
    self.start_dest_distance = start_dest_distance
    self.station_straight_cut = station_straight_cut
    self.station_discount = station_discount
    self.station_discount_max_fee = station_discount_max_fee
    self.dynamic_price_for_carpool = dynamic_price_for_carpool
    self.dynamic_times_for_carpool = dynamic_times_for_carpool
    self.predict_carpool_rate = predict_carpool_rate
    self.predict_carpool_profit_rate = predict_carpool_profit_rate
    self.predict_carpool_intention = predict_carpool_intention

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.arrive_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dynamic_price = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.dynamic_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.dynamic_kind = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.unit_price = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.near_driver_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.near_order_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.assign_driver_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.assign_driver_mode_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.place = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.dynamic_price_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.if_use_times = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.dynamic_times = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.rank_probability = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.dynamic_discount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.feature_str = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.dimi_prob = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.wait_discount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.wait_minute = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.avg_driver_start_distance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.nearest_1_driver_start_distance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.nearest_3_driver_start_distance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.DOUBLE:
          self.one_dynamic_discount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.DOUBLE:
          self.two_dynamic_discount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.DOUBLE:
          self.three_dynamic_discount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.start_dest_distance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.DOUBLE:
          self.station_straight_cut = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.DOUBLE:
          self.station_discount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.DOUBLE:
          self.station_discount_max_fee = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.dynamic_price_for_carpool = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRING:
          self.dynamic_times_for_carpool = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.DOUBLE:
          self.predict_carpool_rate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.DOUBLE:
          self.predict_carpool_profit_rate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.DOUBLE:
          self.predict_carpool_intention = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubPriceRes')
    if self.arrive_time is not None:
      oprot.writeFieldBegin('arrive_time', TType.I32, 1)
      oprot.writeI32(self.arrive_time)
      oprot.writeFieldEnd()
    if self.dynamic_price is not None:
      oprot.writeFieldBegin('dynamic_price', TType.I32, 2)
      oprot.writeI32(self.dynamic_price)
      oprot.writeFieldEnd()
    if self.dynamic_type is not None:
      oprot.writeFieldBegin('dynamic_type', TType.I32, 3)
      oprot.writeI32(self.dynamic_type)
      oprot.writeFieldEnd()
    if self.dynamic_kind is not None:
      oprot.writeFieldBegin('dynamic_kind', TType.I32, 4)
      oprot.writeI32(self.dynamic_kind)
      oprot.writeFieldEnd()
    if self.unit_price is not None:
      oprot.writeFieldBegin('unit_price', TType.DOUBLE, 5)
      oprot.writeDouble(self.unit_price)
      oprot.writeFieldEnd()
    if self.near_driver_num is not None:
      oprot.writeFieldBegin('near_driver_num', TType.I32, 6)
      oprot.writeI32(self.near_driver_num)
      oprot.writeFieldEnd()
    if self.near_order_num is not None:
      oprot.writeFieldBegin('near_order_num', TType.I32, 7)
      oprot.writeI32(self.near_order_num)
      oprot.writeFieldEnd()
    if self.assign_driver_num is not None:
      oprot.writeFieldBegin('assign_driver_num', TType.I32, 8)
      oprot.writeI32(self.assign_driver_num)
      oprot.writeFieldEnd()
    if self.assign_driver_mode_num is not None:
      oprot.writeFieldBegin('assign_driver_mode_num', TType.I32, 9)
      oprot.writeI32(self.assign_driver_mode_num)
      oprot.writeFieldEnd()
    if self.place is not None:
      oprot.writeFieldBegin('place', TType.I32, 10)
      oprot.writeI32(self.place)
      oprot.writeFieldEnd()
    if self.dynamic_price_id is not None:
      oprot.writeFieldBegin('dynamic_price_id', TType.STRING, 11)
      oprot.writeString(self.dynamic_price_id)
      oprot.writeFieldEnd()
    if self.if_use_times is not None:
      oprot.writeFieldBegin('if_use_times', TType.I32, 12)
      oprot.writeI32(self.if_use_times)
      oprot.writeFieldEnd()
    if self.dynamic_times is not None:
      oprot.writeFieldBegin('dynamic_times', TType.STRING, 13)
      oprot.writeString(self.dynamic_times)
      oprot.writeFieldEnd()
    if self.rank_probability is not None:
      oprot.writeFieldBegin('rank_probability', TType.DOUBLE, 14)
      oprot.writeDouble(self.rank_probability)
      oprot.writeFieldEnd()
    if self.dynamic_discount is not None:
      oprot.writeFieldBegin('dynamic_discount', TType.DOUBLE, 15)
      oprot.writeDouble(self.dynamic_discount)
      oprot.writeFieldEnd()
    if self.feature_str is not None:
      oprot.writeFieldBegin('feature_str', TType.STRING, 16)
      oprot.writeString(self.feature_str)
      oprot.writeFieldEnd()
    if self.dimi_prob is not None:
      oprot.writeFieldBegin('dimi_prob', TType.DOUBLE, 17)
      oprot.writeDouble(self.dimi_prob)
      oprot.writeFieldEnd()
    if self.wait_discount is not None:
      oprot.writeFieldBegin('wait_discount', TType.DOUBLE, 18)
      oprot.writeDouble(self.wait_discount)
      oprot.writeFieldEnd()
    if self.wait_minute is not None:
      oprot.writeFieldBegin('wait_minute', TType.I32, 19)
      oprot.writeI32(self.wait_minute)
      oprot.writeFieldEnd()
    if self.avg_driver_start_distance is not None:
      oprot.writeFieldBegin('avg_driver_start_distance', TType.I32, 20)
      oprot.writeI32(self.avg_driver_start_distance)
      oprot.writeFieldEnd()
    if self.nearest_1_driver_start_distance is not None:
      oprot.writeFieldBegin('nearest_1_driver_start_distance', TType.I32, 21)
      oprot.writeI32(self.nearest_1_driver_start_distance)
      oprot.writeFieldEnd()
    if self.nearest_3_driver_start_distance is not None:
      oprot.writeFieldBegin('nearest_3_driver_start_distance', TType.I32, 22)
      oprot.writeI32(self.nearest_3_driver_start_distance)
      oprot.writeFieldEnd()
    if self.one_dynamic_discount is not None:
      oprot.writeFieldBegin('one_dynamic_discount', TType.DOUBLE, 23)
      oprot.writeDouble(self.one_dynamic_discount)
      oprot.writeFieldEnd()
    if self.two_dynamic_discount is not None:
      oprot.writeFieldBegin('two_dynamic_discount', TType.DOUBLE, 24)
      oprot.writeDouble(self.two_dynamic_discount)
      oprot.writeFieldEnd()
    if self.three_dynamic_discount is not None:
      oprot.writeFieldBegin('three_dynamic_discount', TType.DOUBLE, 25)
      oprot.writeDouble(self.three_dynamic_discount)
      oprot.writeFieldEnd()
    if self.start_dest_distance is not None:
      oprot.writeFieldBegin('start_dest_distance', TType.I32, 26)
      oprot.writeI32(self.start_dest_distance)
      oprot.writeFieldEnd()
    if self.station_straight_cut is not None:
      oprot.writeFieldBegin('station_straight_cut', TType.DOUBLE, 27)
      oprot.writeDouble(self.station_straight_cut)
      oprot.writeFieldEnd()
    if self.station_discount is not None:
      oprot.writeFieldBegin('station_discount', TType.DOUBLE, 28)
      oprot.writeDouble(self.station_discount)
      oprot.writeFieldEnd()
    if self.station_discount_max_fee is not None:
      oprot.writeFieldBegin('station_discount_max_fee', TType.DOUBLE, 29)
      oprot.writeDouble(self.station_discount_max_fee)
      oprot.writeFieldEnd()
    if self.dynamic_price_for_carpool is not None:
      oprot.writeFieldBegin('dynamic_price_for_carpool', TType.I32, 30)
      oprot.writeI32(self.dynamic_price_for_carpool)
      oprot.writeFieldEnd()
    if self.dynamic_times_for_carpool is not None:
      oprot.writeFieldBegin('dynamic_times_for_carpool', TType.STRING, 31)
      oprot.writeString(self.dynamic_times_for_carpool)
      oprot.writeFieldEnd()
    if self.predict_carpool_rate is not None:
      oprot.writeFieldBegin('predict_carpool_rate', TType.DOUBLE, 32)
      oprot.writeDouble(self.predict_carpool_rate)
      oprot.writeFieldEnd()
    if self.predict_carpool_profit_rate is not None:
      oprot.writeFieldBegin('predict_carpool_profit_rate', TType.DOUBLE, 33)
      oprot.writeDouble(self.predict_carpool_profit_rate)
      oprot.writeFieldEnd()
    if self.predict_carpool_intention is not None:
      oprot.writeFieldBegin('predict_carpool_intention', TType.DOUBLE, 34)
      oprot.writeDouble(self.predict_carpool_intention)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.arrive_time)
    value = (value * 31) ^ hash(self.dynamic_price)
    value = (value * 31) ^ hash(self.dynamic_type)
    value = (value * 31) ^ hash(self.dynamic_kind)
    value = (value * 31) ^ hash(self.unit_price)
    value = (value * 31) ^ hash(self.near_driver_num)
    value = (value * 31) ^ hash(self.near_order_num)
    value = (value * 31) ^ hash(self.assign_driver_num)
    value = (value * 31) ^ hash(self.assign_driver_mode_num)
    value = (value * 31) ^ hash(self.place)
    value = (value * 31) ^ hash(self.dynamic_price_id)
    value = (value * 31) ^ hash(self.if_use_times)
    value = (value * 31) ^ hash(self.dynamic_times)
    value = (value * 31) ^ hash(self.rank_probability)
    value = (value * 31) ^ hash(self.dynamic_discount)
    value = (value * 31) ^ hash(self.feature_str)
    value = (value * 31) ^ hash(self.dimi_prob)
    value = (value * 31) ^ hash(self.wait_discount)
    value = (value * 31) ^ hash(self.wait_minute)
    value = (value * 31) ^ hash(self.avg_driver_start_distance)
    value = (value * 31) ^ hash(self.nearest_1_driver_start_distance)
    value = (value * 31) ^ hash(self.nearest_3_driver_start_distance)
    value = (value * 31) ^ hash(self.one_dynamic_discount)
    value = (value * 31) ^ hash(self.two_dynamic_discount)
    value = (value * 31) ^ hash(self.three_dynamic_discount)
    value = (value * 31) ^ hash(self.start_dest_distance)
    value = (value * 31) ^ hash(self.station_straight_cut)
    value = (value * 31) ^ hash(self.station_discount)
    value = (value * 31) ^ hash(self.station_discount_max_fee)
    value = (value * 31) ^ hash(self.dynamic_price_for_carpool)
    value = (value * 31) ^ hash(self.dynamic_times_for_carpool)
    value = (value * 31) ^ hash(self.predict_carpool_rate)
    value = (value * 31) ^ hash(self.predict_carpool_profit_rate)
    value = (value * 31) ^ hash(self.predict_carpool_intention)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceRes:
  """
  Attributes:
   - err_no
   - err_msg
   - last_req_time
   - last_req_srclat
   - last_req_srclng
   - last_req_destlat
   - last_req_destlng
   - sub_results
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'err_no', None, None, ), # 1
    (2, TType.STRING, 'err_msg', None, None, ), # 2
    (3, TType.I32, 'last_req_time', None, None, ), # 3
    (4, TType.DOUBLE, 'last_req_srclat', None, None, ), # 4
    (5, TType.DOUBLE, 'last_req_srclng', None, None, ), # 5
    (6, TType.DOUBLE, 'last_req_destlat', None, None, ), # 6
    (7, TType.DOUBLE, 'last_req_destlng', None, None, ), # 7
    (8, TType.MAP, 'sub_results', (TType.I32,None,TType.STRUCT,(SubPriceRes, SubPriceRes.thrift_spec)), None, ), # 8
  )

  def __init__(self, err_no=None, err_msg=None, last_req_time=None, last_req_srclat=None, last_req_srclng=None, last_req_destlat=None, last_req_destlng=None, sub_results=None,):
    self.err_no = err_no
    self.err_msg = err_msg
    self.last_req_time = last_req_time
    self.last_req_srclat = last_req_srclat
    self.last_req_srclng = last_req_srclng
    self.last_req_destlat = last_req_destlat
    self.last_req_destlng = last_req_destlng
    self.sub_results = sub_results

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.err_no = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.err_msg = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.last_req_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.last_req_srclat = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.last_req_srclng = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.last_req_destlat = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.last_req_destlng = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.sub_results = {}
          (_ktype15, _vtype16, _size14 ) = iprot.readMapBegin()
          for _i18 in xrange(_size14):
            _key19 = iprot.readI32()
            _val20 = SubPriceRes()
            _val20.read(iprot)
            self.sub_results[_key19] = _val20
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceRes')
    if self.err_no is not None:
      oprot.writeFieldBegin('err_no', TType.I32, 1)
      oprot.writeI32(self.err_no)
      oprot.writeFieldEnd()
    if self.err_msg is not None:
      oprot.writeFieldBegin('err_msg', TType.STRING, 2)
      oprot.writeString(self.err_msg)
      oprot.writeFieldEnd()
    if self.last_req_time is not None:
      oprot.writeFieldBegin('last_req_time', TType.I32, 3)
      oprot.writeI32(self.last_req_time)
      oprot.writeFieldEnd()
    if self.last_req_srclat is not None:
      oprot.writeFieldBegin('last_req_srclat', TType.DOUBLE, 4)
      oprot.writeDouble(self.last_req_srclat)
      oprot.writeFieldEnd()
    if self.last_req_srclng is not None:
      oprot.writeFieldBegin('last_req_srclng', TType.DOUBLE, 5)
      oprot.writeDouble(self.last_req_srclng)
      oprot.writeFieldEnd()
    if self.last_req_destlat is not None:
      oprot.writeFieldBegin('last_req_destlat', TType.DOUBLE, 6)
      oprot.writeDouble(self.last_req_destlat)
      oprot.writeFieldEnd()
    if self.last_req_destlng is not None:
      oprot.writeFieldBegin('last_req_destlng', TType.DOUBLE, 7)
      oprot.writeDouble(self.last_req_destlng)
      oprot.writeFieldEnd()
    if self.sub_results is not None:
      oprot.writeFieldBegin('sub_results', TType.MAP, 8)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.sub_results))
      for kiter21,viter22 in self.sub_results.items():
        oprot.writeI32(kiter21)
        viter22.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.err_no)
    value = (value * 31) ^ hash(self.err_msg)
    value = (value * 31) ^ hash(self.last_req_time)
    value = (value * 31) ^ hash(self.last_req_srclat)
    value = (value * 31) ^ hash(self.last_req_srclng)
    value = (value * 31) ^ hash(self.last_req_destlat)
    value = (value * 31) ^ hash(self.last_req_destlng)
    value = (value * 31) ^ hash(self.sub_results)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
