#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ErrCode:
  DG_ERR_NONE = 0
  DG_ERR_NO_SUCH_KEY = 4001
  DG_ERR_KEY_EXIST = 4002
  DG_ERR_STORAGE = 1001

  _VALUES_TO_NAMES = {
    0: "DG_ERR_NONE",
    4001: "DG_ERR_NO_SUCH_KEY",
    4002: "DG_ERR_KEY_EXIST",
    1001: "DG_ERR_STORAGE",
  }

  _NAMES_TO_VALUES = {
    "DG_ERR_NONE": 0,
    "DG_ERR_NO_SUCH_KEY": 4001,
    "DG_ERR_KEY_EXIST": 4002,
    "DG_ERR_STORAGE": 1001,
  }

class CoordType:
  BAIDU = 1
  SOSOGCJ = 2
  WGS84 = 3

  _VALUES_TO_NAMES = {
    1: "BAIDU",
    2: "SOSOGCJ",
    3: "WGS84",
  }

  _NAMES_TO_VALUES = {
    "BAIDU": 1,
    "SOSOGCJ": 2,
    "WGS84": 3,
  }

class Business:
  DACHE = 257
  PREMIUM = 258
  CARMATE = 259
  FLASH = 260
  DRIVERSERVICE = 261
  BUS = 262

  _VALUES_TO_NAMES = {
    257: "DACHE",
    258: "PREMIUM",
    259: "CARMATE",
    260: "FLASH",
    261: "DRIVERSERVICE",
    262: "BUS",
  }

  _NAMES_TO_VALUES = {
    "DACHE": 257,
    "PREMIUM": 258,
    "CARMATE": 259,
    "FLASH": 260,
    "DRIVERSERVICE": 261,
    "BUS": 262,
  }

class Role:
  DRIVER = 1
  PASSENGER = 2
  ORDER = 3

  _VALUES_TO_NAMES = {
    1: "DRIVER",
    2: "PASSENGER",
    3: "ORDER",
  }

  _NAMES_TO_VALUES = {
    "DRIVER": 1,
    "PASSENGER": 2,
    "ORDER": 3,
  }


class RespMsg:
  """
  Attributes:
   - errcode
   - errmsg
   - info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errcode', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
    (3, TType.MAP, 'info', (TType.STRING,None,TType.STRING,None), None, ), # 3
  )

  def __init__(self, errcode=None, errmsg=None, info=None,):
    self.errcode = errcode
    self.errmsg = errmsg
    self.info = info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.info = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.info[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RespMsg')
    if self.errcode is not None:
      oprot.writeFieldBegin('errcode', TType.I32, 1)
      oprot.writeI32(self.errcode)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    if self.info is not None:
      oprot.writeFieldBegin('info', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.info))
      for kiter7,viter8 in self.info.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.errcode)
    value = (value * 31) ^ hash(self.errmsg)
    value = (value * 31) ^ hash(self.info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Holder:
  """
  Attributes:
   - business
   - role
   - id
   - status_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'business', None, None, ), # 1
    (2, TType.I32, 'role', None, None, ), # 2
    (3, TType.I64, 'id', None, None, ), # 3
    (4, TType.MAP, 'status_info', (TType.STRING,None,TType.I64,None), None, ), # 4
  )

  def __init__(self, business=None, role=None, id=None, status_info=None,):
    self.business = business
    self.role = role
    self.id = id
    self.status_info = status_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.business = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.role = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.status_info = {}
          (_ktype10, _vtype11, _size9 ) = iprot.readMapBegin()
          for _i13 in xrange(_size9):
            _key14 = iprot.readString();
            _val15 = iprot.readI64();
            self.status_info[_key14] = _val15
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Holder')
    if self.business is not None:
      oprot.writeFieldBegin('business', TType.I32, 1)
      oprot.writeI32(self.business)
      oprot.writeFieldEnd()
    if self.role is not None:
      oprot.writeFieldBegin('role', TType.I32, 2)
      oprot.writeI32(self.role)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 3)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.status_info is not None:
      oprot.writeFieldBegin('status_info', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.status_info))
      for kiter16,viter17 in self.status_info.items():
        oprot.writeString(kiter16)
        oprot.writeI64(viter17)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.business)
    value = (value * 31) ^ hash(self.role)
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.status_info)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Coordinate:
  """
  Attributes:
   - lng
   - lat
   - coordtype
   - holder
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'lng', None, None, ), # 1
    (2, TType.DOUBLE, 'lat', None, None, ), # 2
    (3, TType.I32, 'coordtype', None, None, ), # 3
    (4, TType.STRUCT, 'holder', (Holder, Holder.thrift_spec), None, ), # 4
  )

  def __init__(self, lng=None, lat=None, coordtype=None, holder=None,):
    self.lng = lng
    self.lat = lat
    self.coordtype = coordtype
    self.holder = holder

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.lng = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.lat = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.coordtype = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.holder = Holder()
          self.holder.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Coordinate')
    if self.lng is not None:
      oprot.writeFieldBegin('lng', TType.DOUBLE, 1)
      oprot.writeDouble(self.lng)
      oprot.writeFieldEnd()
    if self.lat is not None:
      oprot.writeFieldBegin('lat', TType.DOUBLE, 2)
      oprot.writeDouble(self.lat)
      oprot.writeFieldEnd()
    if self.coordtype is not None:
      oprot.writeFieldBegin('coordtype', TType.I32, 3)
      oprot.writeI32(self.coordtype)
      oprot.writeFieldEnd()
    if self.holder is not None:
      oprot.writeFieldBegin('holder', TType.STRUCT, 4)
      self.holder.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.lng)
    value = (value * 31) ^ hash(self.lat)
    value = (value * 31) ^ hash(self.coordtype)
    value = (value * 31) ^ hash(self.holder)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GridInfo:
  """
  Attributes:
   - grid
   - central
   - vertices
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'grid', None, None, ), # 1
    (2, TType.STRUCT, 'central', (Coordinate, Coordinate.thrift_spec), None, ), # 2
    (3, TType.SET, 'vertices', (TType.STRUCT,(Coordinate, Coordinate.thrift_spec)), None, ), # 3
  )

  def __init__(self, grid=None, central=None, vertices=None,):
    self.grid = grid
    self.central = central
    self.vertices = vertices

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.grid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.central = Coordinate()
          self.central.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.vertices = set()
          (_etype21, _size18) = iprot.readSetBegin()
          for _i22 in xrange(_size18):
            _elem23 = Coordinate()
            _elem23.read(iprot)
            self.vertices.add(_elem23)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GridInfo')
    if self.grid is not None:
      oprot.writeFieldBegin('grid', TType.STRING, 1)
      oprot.writeString(self.grid)
      oprot.writeFieldEnd()
    if self.central is not None:
      oprot.writeFieldBegin('central', TType.STRUCT, 2)
      self.central.write(oprot)
      oprot.writeFieldEnd()
    if self.vertices is not None:
      oprot.writeFieldBegin('vertices', TType.SET, 3)
      oprot.writeSetBegin(TType.STRUCT, len(self.vertices))
      for iter24 in self.vertices:
        iter24.write(oprot)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.grid)
    value = (value * 31) ^ hash(self.central)
    value = (value * 31) ^ hash(self.vertices)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
