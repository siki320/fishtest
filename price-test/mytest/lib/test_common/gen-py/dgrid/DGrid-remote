#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from dgrid import DGrid
from dgrid.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('   CoordinatesToGrids( coords)')
  print('   GetAroundGrids(Grid grid, i32 level)')
  print('   GetGridsByHolders( holders)')
  print('   GetHoldersByGrids( grids,  businesses, Filter filter)')
  print('  RespMsg SetGridsData( grids,  data, Business business)')
  print('   GetGridsData( grids,  keys, Business business)')
  print('   GetGridsKeys( grids, Business business)')
  print('  RespMsg DeleteGridsData( grids,  keys, Business business)')
  print('   GetGridsCoords( grids)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = DGrid.Client(protocol)
transport.open()

if cmd == 'CoordinatesToGrids':
  if len(args) != 1:
    print('CoordinatesToGrids requires 1 args')
    sys.exit(1)
  pp.pprint(client.CoordinatesToGrids(eval(args[0]),))

elif cmd == 'GetAroundGrids':
  if len(args) != 2:
    print('GetAroundGrids requires 2 args')
    sys.exit(1)
  pp.pprint(client.GetAroundGrids(eval(args[0]),eval(args[1]),))

elif cmd == 'GetGridsByHolders':
  if len(args) != 1:
    print('GetGridsByHolders requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetGridsByHolders(eval(args[0]),))

elif cmd == 'GetHoldersByGrids':
  if len(args) != 3:
    print('GetHoldersByGrids requires 3 args')
    sys.exit(1)
  pp.pprint(client.GetHoldersByGrids(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'SetGridsData':
  if len(args) != 3:
    print('SetGridsData requires 3 args')
    sys.exit(1)
  pp.pprint(client.SetGridsData(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'GetGridsData':
  if len(args) != 3:
    print('GetGridsData requires 3 args')
    sys.exit(1)
  pp.pprint(client.GetGridsData(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'GetGridsKeys':
  if len(args) != 2:
    print('GetGridsKeys requires 2 args')
    sys.exit(1)
  pp.pprint(client.GetGridsKeys(eval(args[0]),eval(args[1]),))

elif cmd == 'DeleteGridsData':
  if len(args) != 3:
    print('DeleteGridsData requires 3 args')
    sys.exit(1)
  pp.pprint(client.DeleteGridsData(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'GetGridsCoords':
  if len(args) != 1:
    print('GetGridsCoords requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetGridsCoords(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
