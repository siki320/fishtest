#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def GetJob(self, scheduleType, trace):
    """
    Parameters:
     - scheduleType
     - trace
    """
    pass

  def PutJob(self, scheduleType, req, trace):
    """
    Parameters:
     - scheduleType
     - req
     - trace
    """
    pass

  def AddCityId(self, sid, cityId, trace):
    """
    Parameters:
     - sid
     - cityId
     - trace
    """
    pass

  def GetAllCityIds(self, sid, req, trace):
    """
    Parameters:
     - sid
     - req
     - trace
    """
    pass

  def GetComputedCityIds(self, scheduleType, req, trace):
    """
    Parameters:
     - scheduleType
     - req
     - trace
    """
    pass

  def GetUnComputeCityIds(self, scheduleType, req, trace):
    """
    Parameters:
     - scheduleType
     - req
     - trace
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def GetJob(self, scheduleType, trace):
    """
    Parameters:
     - scheduleType
     - trace
    """
    self.send_GetJob(scheduleType, trace)
    return self.recv_GetJob()

  def send_GetJob(self, scheduleType, trace):
    self._oprot.writeMessageBegin('GetJob', TMessageType.CALL, self._seqid)
    args = GetJob_args()
    args.scheduleType = scheduleType
    args.trace = trace
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetJob(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = GetJob_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetJob failed: unknown result");

  def PutJob(self, scheduleType, req, trace):
    """
    Parameters:
     - scheduleType
     - req
     - trace
    """
    self.send_PutJob(scheduleType, req, trace)
    return self.recv_PutJob()

  def send_PutJob(self, scheduleType, req, trace):
    self._oprot.writeMessageBegin('PutJob', TMessageType.CALL, self._seqid)
    args = PutJob_args()
    args.scheduleType = scheduleType
    args.req = req
    args.trace = trace
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_PutJob(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = PutJob_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "PutJob failed: unknown result");

  def AddCityId(self, sid, cityId, trace):
    """
    Parameters:
     - sid
     - cityId
     - trace
    """
    self.send_AddCityId(sid, cityId, trace)
    return self.recv_AddCityId()

  def send_AddCityId(self, sid, cityId, trace):
    self._oprot.writeMessageBegin('AddCityId', TMessageType.CALL, self._seqid)
    args = AddCityId_args()
    args.sid = sid
    args.cityId = cityId
    args.trace = trace
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_AddCityId(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = AddCityId_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "AddCityId failed: unknown result");

  def GetAllCityIds(self, sid, req, trace):
    """
    Parameters:
     - sid
     - req
     - trace
    """
    self.send_GetAllCityIds(sid, req, trace)
    return self.recv_GetAllCityIds()

  def send_GetAllCityIds(self, sid, req, trace):
    self._oprot.writeMessageBegin('GetAllCityIds', TMessageType.CALL, self._seqid)
    args = GetAllCityIds_args()
    args.sid = sid
    args.req = req
    args.trace = trace
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetAllCityIds(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = GetAllCityIds_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetAllCityIds failed: unknown result");

  def GetComputedCityIds(self, scheduleType, req, trace):
    """
    Parameters:
     - scheduleType
     - req
     - trace
    """
    self.send_GetComputedCityIds(scheduleType, req, trace)
    return self.recv_GetComputedCityIds()

  def send_GetComputedCityIds(self, scheduleType, req, trace):
    self._oprot.writeMessageBegin('GetComputedCityIds', TMessageType.CALL, self._seqid)
    args = GetComputedCityIds_args()
    args.scheduleType = scheduleType
    args.req = req
    args.trace = trace
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetComputedCityIds(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = GetComputedCityIds_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetComputedCityIds failed: unknown result");

  def GetUnComputeCityIds(self, scheduleType, req, trace):
    """
    Parameters:
     - scheduleType
     - req
     - trace
    """
    self.send_GetUnComputeCityIds(scheduleType, req, trace)
    return self.recv_GetUnComputeCityIds()

  def send_GetUnComputeCityIds(self, scheduleType, req, trace):
    self._oprot.writeMessageBegin('GetUnComputeCityIds', TMessageType.CALL, self._seqid)
    args = GetUnComputeCityIds_args()
    args.scheduleType = scheduleType
    args.req = req
    args.trace = trace
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_GetUnComputeCityIds(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = GetUnComputeCityIds_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "GetUnComputeCityIds failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["GetJob"] = Processor.process_GetJob
    self._processMap["PutJob"] = Processor.process_PutJob
    self._processMap["AddCityId"] = Processor.process_AddCityId
    self._processMap["GetAllCityIds"] = Processor.process_GetAllCityIds
    self._processMap["GetComputedCityIds"] = Processor.process_GetComputedCityIds
    self._processMap["GetUnComputeCityIds"] = Processor.process_GetUnComputeCityIds

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_GetJob(self, seqid, iprot, oprot):
    args = GetJob_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetJob_result()
    result.success = self._handler.GetJob(args.scheduleType, args.trace)
    oprot.writeMessageBegin("GetJob", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_PutJob(self, seqid, iprot, oprot):
    args = PutJob_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = PutJob_result()
    result.success = self._handler.PutJob(args.scheduleType, args.req, args.trace)
    oprot.writeMessageBegin("PutJob", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_AddCityId(self, seqid, iprot, oprot):
    args = AddCityId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = AddCityId_result()
    result.success = self._handler.AddCityId(args.sid, args.cityId, args.trace)
    oprot.writeMessageBegin("AddCityId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetAllCityIds(self, seqid, iprot, oprot):
    args = GetAllCityIds_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetAllCityIds_result()
    result.success = self._handler.GetAllCityIds(args.sid, args.req, args.trace)
    oprot.writeMessageBegin("GetAllCityIds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetComputedCityIds(self, seqid, iprot, oprot):
    args = GetComputedCityIds_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetComputedCityIds_result()
    result.success = self._handler.GetComputedCityIds(args.scheduleType, args.req, args.trace)
    oprot.writeMessageBegin("GetComputedCityIds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_GetUnComputeCityIds(self, seqid, iprot, oprot):
    args = GetUnComputeCityIds_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = GetUnComputeCityIds_result()
    result.success = self._handler.GetUnComputeCityIds(args.scheduleType, args.req, args.trace)
    oprot.writeMessageBegin("GetUnComputeCityIds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class GetJob_args:
  """
  Attributes:
   - scheduleType
   - trace
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'scheduleType', None, None, ), # 1
    (2, TType.STRUCT, 'trace', (Trace, Trace.thrift_spec), None, ), # 2
  )

  def __init__(self, scheduleType=None, trace=None,):
    self.scheduleType = scheduleType
    self.trace = trace

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.scheduleType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.trace = Trace()
          self.trace.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetJob_args')
    if self.scheduleType is not None:
      oprot.writeFieldBegin('scheduleType', TType.I32, 1)
      oprot.writeI32(self.scheduleType)
      oprot.writeFieldEnd()
    if self.trace is not None:
      oprot.writeFieldBegin('trace', TType.STRUCT, 2)
      self.trace.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.scheduleType)
    value = (value * 31) ^ hash(self.trace)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetJob_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (RespJob, RespJob.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = RespJob()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetJob_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PutJob_args:
  """
  Attributes:
   - scheduleType
   - req
   - trace
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'scheduleType', None, None, ), # 1
    (2, TType.STRUCT, 'req', (PutJobReq, PutJobReq.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'trace', (Trace, Trace.thrift_spec), None, ), # 3
  )

  def __init__(self, scheduleType=None, req=None, trace=None,):
    self.scheduleType = scheduleType
    self.req = req
    self.trace = trace

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.scheduleType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.req = PutJobReq()
          self.req.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.trace = Trace()
          self.trace.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PutJob_args')
    if self.scheduleType is not None:
      oprot.writeFieldBegin('scheduleType', TType.I32, 1)
      oprot.writeI32(self.scheduleType)
      oprot.writeFieldEnd()
    if self.req is not None:
      oprot.writeFieldBegin('req', TType.STRUCT, 2)
      self.req.write(oprot)
      oprot.writeFieldEnd()
    if self.trace is not None:
      oprot.writeFieldBegin('trace', TType.STRUCT, 3)
      self.trace.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.scheduleType)
    value = (value * 31) ^ hash(self.req)
    value = (value * 31) ^ hash(self.trace)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PutJob_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (RespMsg, RespMsg.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = RespMsg()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PutJob_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddCityId_args:
  """
  Attributes:
   - sid
   - cityId
   - trace
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.I32, 'cityId', None, None, ), # 2
    (3, TType.STRUCT, 'trace', (Trace, Trace.thrift_spec), None, ), # 3
  )

  def __init__(self, sid=None, cityId=None, trace=None,):
    self.sid = sid
    self.cityId = cityId
    self.trace = trace

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.trace = Trace()
          self.trace.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddCityId_args')
    if self.sid is not None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.cityId is not None:
      oprot.writeFieldBegin('cityId', TType.I32, 2)
      oprot.writeI32(self.cityId)
      oprot.writeFieldEnd()
    if self.trace is not None:
      oprot.writeFieldBegin('trace', TType.STRUCT, 3)
      self.trace.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sid)
    value = (value * 31) ^ hash(self.cityId)
    value = (value * 31) ^ hash(self.trace)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddCityId_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (RespMsg, RespMsg.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = RespMsg()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddCityId_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetAllCityIds_args:
  """
  Attributes:
   - sid
   - req
   - trace
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRUCT, 'req', (GetCityIdsReq, GetCityIdsReq.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'trace', (Trace, Trace.thrift_spec), None, ), # 3
  )

  def __init__(self, sid=None, req=None, trace=None,):
    self.sid = sid
    self.req = req
    self.trace = trace

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.req = GetCityIdsReq()
          self.req.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.trace = Trace()
          self.trace.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetAllCityIds_args')
    if self.sid is not None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.req is not None:
      oprot.writeFieldBegin('req', TType.STRUCT, 2)
      self.req.write(oprot)
      oprot.writeFieldEnd()
    if self.trace is not None:
      oprot.writeFieldBegin('trace', TType.STRUCT, 3)
      self.trace.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sid)
    value = (value * 31) ^ hash(self.req)
    value = (value * 31) ^ hash(self.trace)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetAllCityIds_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (RespCityIds, RespCityIds.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = RespCityIds()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetAllCityIds_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetComputedCityIds_args:
  """
  Attributes:
   - scheduleType
   - req
   - trace
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'scheduleType', None, None, ), # 1
    (2, TType.STRUCT, 'req', (GetCityIdsReq, GetCityIdsReq.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'trace', (Trace, Trace.thrift_spec), None, ), # 3
  )

  def __init__(self, scheduleType=None, req=None, trace=None,):
    self.scheduleType = scheduleType
    self.req = req
    self.trace = trace

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.scheduleType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.req = GetCityIdsReq()
          self.req.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.trace = Trace()
          self.trace.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetComputedCityIds_args')
    if self.scheduleType is not None:
      oprot.writeFieldBegin('scheduleType', TType.I32, 1)
      oprot.writeI32(self.scheduleType)
      oprot.writeFieldEnd()
    if self.req is not None:
      oprot.writeFieldBegin('req', TType.STRUCT, 2)
      self.req.write(oprot)
      oprot.writeFieldEnd()
    if self.trace is not None:
      oprot.writeFieldBegin('trace', TType.STRUCT, 3)
      self.trace.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.scheduleType)
    value = (value * 31) ^ hash(self.req)
    value = (value * 31) ^ hash(self.trace)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetComputedCityIds_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (RespCityIds, RespCityIds.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = RespCityIds()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetComputedCityIds_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetUnComputeCityIds_args:
  """
  Attributes:
   - scheduleType
   - req
   - trace
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'scheduleType', None, None, ), # 1
    (2, TType.STRUCT, 'req', (GetCityIdsReq, GetCityIdsReq.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'trace', (Trace, Trace.thrift_spec), None, ), # 3
  )

  def __init__(self, scheduleType=None, req=None, trace=None,):
    self.scheduleType = scheduleType
    self.req = req
    self.trace = trace

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.scheduleType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.req = GetCityIdsReq()
          self.req.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.trace = Trace()
          self.trace.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetUnComputeCityIds_args')
    if self.scheduleType is not None:
      oprot.writeFieldBegin('scheduleType', TType.I32, 1)
      oprot.writeI32(self.scheduleType)
      oprot.writeFieldEnd()
    if self.req is not None:
      oprot.writeFieldBegin('req', TType.STRUCT, 2)
      self.req.write(oprot)
      oprot.writeFieldEnd()
    if self.trace is not None:
      oprot.writeFieldBegin('trace', TType.STRUCT, 3)
      self.trace.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.scheduleType)
    value = (value * 31) ^ hash(self.req)
    value = (value * 31) ^ hash(self.trace)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetUnComputeCityIds_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (RespCityIds, RespCityIds.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = RespCityIds()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetUnComputeCityIds_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
