#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ScheduleType:
  ALL = 0
  TAXI = 1
  GS = 2
  AL = 3

  _VALUES_TO_NAMES = {
    0: "ALL",
    1: "TAXI",
    2: "GS",
    3: "AL",
  }

  _NAMES_TO_VALUES = {
    "ALL": 0,
    "TAXI": 1,
    "GS": 2,
  }


class Trace:
  """
  Attributes:
   - logId
   - caller
   - spanId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'logId', None, None, ), # 1
    (2, TType.STRING, 'caller', None, None, ), # 2
    (3, TType.STRING, 'spanId', None, None, ), # 3
  )

  def __init__(self, logId=None, caller=None, spanId=None,):
    self.logId = logId
    self.caller = caller
    self.spanId = spanId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.logId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.caller = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.spanId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Trace')
    if self.logId is not None:
      oprot.writeFieldBegin('logId', TType.STRING, 1)
      oprot.writeString(self.logId)
      oprot.writeFieldEnd()
    if self.caller is not None:
      oprot.writeFieldBegin('caller', TType.STRING, 2)
      oprot.writeString(self.caller)
      oprot.writeFieldEnd()
    if self.spanId is not None:
      oprot.writeFieldBegin('spanId', TType.STRING, 3)
      oprot.writeString(self.spanId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.logId is None:
      raise TProtocol.TProtocolException(message='Required field logId is unset!')
    if self.caller is None:
      raise TProtocol.TProtocolException(message='Required field caller is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.logId)
    value = (value * 31) ^ hash(self.caller)
    value = (value * 31) ^ hash(self.spanId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RespJob:
  """
  Attributes:
   - errNo
   - errMsg
   - cityId
   - jobId
   - seqId
   - timestamp
   - orderIds
   - driverIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errNo', None, None, ), # 1
    (2, TType.STRING, 'errMsg', None, None, ), # 2
    (3, TType.I32, 'cityId', None, None, ), # 3
    (4, TType.STRING, 'jobId', None, None, ), # 4
    (5, TType.STRING, 'seqId', None, None, ), # 5
    (6, TType.I64, 'timestamp', None, None, ), # 6
    (7, TType.MAP, 'orderIds', (TType.STRING,None,TType.LIST,(TType.I64,None)), None, ), # 7
    (8, TType.MAP, 'driverIds', (TType.STRING,None,TType.LIST,(TType.I64,None)), None, ), # 8
  )

  def __init__(self, errNo=None, errMsg=None, cityId=None, jobId=None, seqId=None, timestamp=None, orderIds=None, driverIds=None,):
    self.errNo = errNo
    self.errMsg = errMsg
    self.cityId = cityId
    self.jobId = jobId
    self.seqId = seqId
    self.timestamp = timestamp
    self.orderIds = orderIds
    self.driverIds = driverIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errNo = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.jobId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.seqId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.orderIds = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = []
            (_etype10, _size7) = iprot.readListBegin()
            for _i11 in xrange(_size7):
              _elem12 = iprot.readI64();
              _val6.append(_elem12)
            iprot.readListEnd()
            self.orderIds[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.driverIds = {}
          (_ktype14, _vtype15, _size13 ) = iprot.readMapBegin()
          for _i17 in xrange(_size13):
            _key18 = iprot.readString();
            _val19 = []
            (_etype23, _size20) = iprot.readListBegin()
            for _i24 in xrange(_size20):
              _elem25 = iprot.readI64();
              _val19.append(_elem25)
            iprot.readListEnd()
            self.driverIds[_key18] = _val19
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RespJob')
    if self.errNo is not None:
      oprot.writeFieldBegin('errNo', TType.I32, 1)
      oprot.writeI32(self.errNo)
      oprot.writeFieldEnd()
    if self.errMsg is not None:
      oprot.writeFieldBegin('errMsg', TType.STRING, 2)
      oprot.writeString(self.errMsg)
      oprot.writeFieldEnd()
    if self.cityId is not None:
      oprot.writeFieldBegin('cityId', TType.I32, 3)
      oprot.writeI32(self.cityId)
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 4)
      oprot.writeString(self.jobId)
      oprot.writeFieldEnd()
    if self.seqId is not None:
      oprot.writeFieldBegin('seqId', TType.STRING, 5)
      oprot.writeString(self.seqId)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 6)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.orderIds is not None:
      oprot.writeFieldBegin('orderIds', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.orderIds))
      for kiter26,viter27 in self.orderIds.items():
        oprot.writeString(kiter26)
        oprot.writeListBegin(TType.I64, len(viter27))
        for iter28 in viter27:
          oprot.writeI64(iter28)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.driverIds is not None:
      oprot.writeFieldBegin('driverIds', TType.MAP, 8)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.driverIds))
      for kiter29,viter30 in self.driverIds.items():
        oprot.writeString(kiter29)
        oprot.writeListBegin(TType.I64, len(viter30))
        for iter31 in viter30:
          oprot.writeI64(iter31)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.errNo is None:
      raise TProtocol.TProtocolException(message='Required field errNo is unset!')
    if self.errMsg is None:
      raise TProtocol.TProtocolException(message='Required field errMsg is unset!')
    if self.cityId is None:
      raise TProtocol.TProtocolException(message='Required field cityId is unset!')
    if self.jobId is None:
      raise TProtocol.TProtocolException(message='Required field jobId is unset!')
    if self.seqId is None:
      raise TProtocol.TProtocolException(message='Required field seqId is unset!')
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.errNo)
    value = (value * 31) ^ hash(self.errMsg)
    value = (value * 31) ^ hash(self.cityId)
    value = (value * 31) ^ hash(self.jobId)
    value = (value * 31) ^ hash(self.seqId)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.orderIds)
    value = (value * 31) ^ hash(self.driverIds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PutJobReq:
  """
  Attributes:
   - cityId
   - jobId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cityId', None, None, ), # 1
    (2, TType.STRING, 'jobId', None, None, ), # 2
  )

  def __init__(self, cityId=None, jobId=None,):
    self.cityId = cityId
    self.jobId = jobId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.jobId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PutJobReq')
    if self.cityId is not None:
      oprot.writeFieldBegin('cityId', TType.I32, 1)
      oprot.writeI32(self.cityId)
      oprot.writeFieldEnd()
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 2)
      oprot.writeString(self.jobId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cityId is None:
      raise TProtocol.TProtocolException(message='Required field cityId is unset!')
    if self.jobId is None:
      raise TProtocol.TProtocolException(message='Required field jobId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cityId)
    value = (value * 31) ^ hash(self.jobId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RespMsg:
  """
  Attributes:
   - errNo
   - errMsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errNo', None, None, ), # 1
    (2, TType.STRING, 'errMsg', None, None, ), # 2
  )

  def __init__(self, errNo=None, errMsg=None,):
    self.errNo = errNo
    self.errMsg = errMsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errNo = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RespMsg')
    if self.errNo is not None:
      oprot.writeFieldBegin('errNo', TType.I32, 1)
      oprot.writeI32(self.errNo)
      oprot.writeFieldEnd()
    if self.errMsg is not None:
      oprot.writeFieldBegin('errMsg', TType.STRING, 2)
      oprot.writeString(self.errMsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.errNo is None:
      raise TProtocol.TProtocolException(message='Required field errNo is unset!')
    if self.errMsg is None:
      raise TProtocol.TProtocolException(message='Required field errMsg is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.errNo)
    value = (value * 31) ^ hash(self.errMsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RespCityIds:
  """
  Attributes:
   - errNo
   - errMsg
   - cityIds
   - cityNum
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errNo', None, None, ), # 1
    (2, TType.STRING, 'errMsg', None, None, ), # 2
    (3, TType.LIST, 'cityIds', (TType.I32,None), None, ), # 3
    (4, TType.I32, 'cityNum', None, None, ), # 4
  )

  def __init__(self, errNo=None, errMsg=None, cityIds=None, cityNum=None,):
    self.errNo = errNo
    self.errMsg = errMsg
    self.cityIds = cityIds
    self.cityNum = cityNum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errNo = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.cityIds = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = iprot.readI32();
            self.cityIds.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cityNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RespCityIds')
    if self.errNo is not None:
      oprot.writeFieldBegin('errNo', TType.I32, 1)
      oprot.writeI32(self.errNo)
      oprot.writeFieldEnd()
    if self.errMsg is not None:
      oprot.writeFieldBegin('errMsg', TType.STRING, 2)
      oprot.writeString(self.errMsg)
      oprot.writeFieldEnd()
    if self.cityIds is not None:
      oprot.writeFieldBegin('cityIds', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.cityIds))
      for iter38 in self.cityIds:
        oprot.writeI32(iter38)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cityNum is not None:
      oprot.writeFieldBegin('cityNum', TType.I32, 4)
      oprot.writeI32(self.cityNum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.errNo is None:
      raise TProtocol.TProtocolException(message='Required field errNo is unset!')
    if self.errMsg is None:
      raise TProtocol.TProtocolException(message='Required field errMsg is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.errNo)
    value = (value * 31) ^ hash(self.errMsg)
    value = (value * 31) ^ hash(self.cityIds)
    value = (value * 31) ^ hash(self.cityNum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetCityIdsReq:
  """
  Attributes:
   - queryType
   - sortFlag
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'queryType', None, None, ), # 1
    (2, TType.I32, 'sortFlag', None, None, ), # 2
  )

  def __init__(self, queryType=None, sortFlag=None,):
    self.queryType = queryType
    self.sortFlag = sortFlag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.queryType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sortFlag = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetCityIdsReq')
    if self.queryType is not None:
      oprot.writeFieldBegin('queryType', TType.I32, 1)
      oprot.writeI32(self.queryType)
      oprot.writeFieldEnd()
    if self.sortFlag is not None:
      oprot.writeFieldBegin('sortFlag', TType.I32, 2)
      oprot.writeI32(self.sortFlag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.queryType is None:
      raise TProtocol.TProtocolException(message='Required field queryType is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.queryType)
    value = (value * 31) ^ hash(self.sortFlag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RespStream:
  """
  Attributes:
   - errNo
   - errMsg
   - orderIds
   - driverIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errNo', None, None, ), # 1
    (2, TType.STRING, 'errMsg', None, None, ), # 2
    (3, TType.LIST, 'orderIds', (TType.I64,None), None, ), # 3
    (4, TType.LIST, 'driverIds', (TType.I64,None), None, ), # 4
  )

  def __init__(self, errNo=None, errMsg=None, orderIds=None, driverIds=None,):
    self.errNo = errNo
    self.errMsg = errMsg
    self.orderIds = orderIds
    self.driverIds = driverIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errNo = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.orderIds = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = iprot.readI64();
            self.orderIds.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.driverIds = []
          (_etype48, _size45) = iprot.readListBegin()
          for _i49 in xrange(_size45):
            _elem50 = iprot.readI64();
            self.driverIds.append(_elem50)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RespStream')
    if self.errNo is not None:
      oprot.writeFieldBegin('errNo', TType.I32, 1)
      oprot.writeI32(self.errNo)
      oprot.writeFieldEnd()
    if self.errMsg is not None:
      oprot.writeFieldBegin('errMsg', TType.STRING, 2)
      oprot.writeString(self.errMsg)
      oprot.writeFieldEnd()
    if self.orderIds is not None:
      oprot.writeFieldBegin('orderIds', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.orderIds))
      for iter51 in self.orderIds:
        oprot.writeI64(iter51)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.driverIds is not None:
      oprot.writeFieldBegin('driverIds', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.driverIds))
      for iter52 in self.driverIds:
        oprot.writeI64(iter52)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.errNo is None:
      raise TProtocol.TProtocolException(message='Required field errNo is unset!')
    if self.errMsg is None:
      raise TProtocol.TProtocolException(message='Required field errMsg is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.errNo)
    value = (value * 31) ^ hash(self.errMsg)
    value = (value * 31) ^ hash(self.orderIds)
    value = (value * 31) ^ hash(self.driverIds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
